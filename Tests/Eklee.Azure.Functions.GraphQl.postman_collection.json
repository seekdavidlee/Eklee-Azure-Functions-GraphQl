{
	"info": {
		"_postman_id": "7bfb4d53-576c-4e7d-a951-78ccc6296495",
		"name": "Eklee.Azure.Functions.GraphQl",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Contans access token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"access_token\", jsonData.access_token);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "client_secret",
									"value": "{{clientSecret}}",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{clientId}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{tenant1user1}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{tenant1user1password}}",
									"type": "text"
								},
								{
									"key": "resource",
									"value": "{{resourceId}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://login.microsoftonline.com/{{tenant1Id}}/oauth2/token",
							"protocol": "https",
							"host": [
								"login",
								"microsoftonline",
								"com"
							],
							"path": [
								"{{tenant1Id}}",
								"oauth2",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetSchema",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":\"IntrospectionQuery\",\"variables\":{},\"query\":\"query IntrospectionQuery {\\n  __schema {\\n    queryType {\\n      name\\n    }\\n    mutationType {\\n      name\\n    }\\n    subscriptionType {\\n      name\\n    }\\n    types {\\n      ...FullType\\n    }\\n    directives {\\n      name\\n      description\\n      locations\\n      args {\\n        ...InputValue\\n      }\\n    }\\n  }\\n}\\n\\nfragment FullType on __Type {\\n  kind\\n  name\\n  description\\n  fields(includeDeprecated: true) {\\n    name\\n    description\\n    args {\\n      ...InputValue\\n    }\\n    type {\\n      ...TypeRef\\n    }\\n    isDeprecated\\n    deprecationReason\\n  }\\n  inputFields {\\n    ...InputValue\\n  }\\n  interfaces {\\n    ...TypeRef\\n  }\\n  enumValues(includeDeprecated: true) {\\n    name\\n    description\\n    isDeprecated\\n    deprecationReason\\n  }\\n  possibleTypes {\\n    ...TypeRef\\n  }\\n}\\n\\nfragment InputValue on __InputValue {\\n  name\\n  description\\n  type {\\n    ...TypeRef\\n  }\\n  defaultValue\\n}\\n\\nfragment TypeRef on __Type {\\n  kind\\n  name\\n  ofType {\\n    kind\\n    name\\n    ofType {\\n      kind\\n      name\\n      ofType {\\n        kind\\n        name\\n        ofType {\\n          kind\\n          name\\n          ofType {\\n            kind\\n            name\\n            ofType {\\n              kind\\n              name\\n              ofType {\\n                kind\\n                name\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testdocumentdb/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testdocumentdb",
								"graph"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Publisher",
			"item": [
				{
					"name": "Add Publisher",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200.\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Get publisher with Id 7.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(\"7\");",
									"    pm.expect(jsonData.name).to.eql(\"FOOBAR Publisher\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"7\",\n\t\"name\": \"FOOBAR Publisher\"\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/publishers",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"publishers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Publisher",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200.\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Get publisher with Id 7.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(\"7\");",
									"    pm.expect(jsonData.name).to.eql(\"FOOBAR Publisher V2\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"7\",\n\t\"name\": \"FOOBAR Publisher V2\"\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/publishers/7",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"publishers",
								"7"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Publisher Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200.\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Get publisher with Id 7.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(\"7\");",
									"    pm.expect(jsonData.name).to.eql(\"FOOBAR Publisher V2\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"7\",\n\t\"name\": \"FOOBAR Publisher V2\"\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/publishers/7",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"publishers",
								"7"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Publisher",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200.\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"7\",\n\t\"name\": \"FOOBAR Publisher V2\"\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/publishers/7",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"publishers",
								"7"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "TestSearch",
			"item": [
				{
					"name": "Init",
					"item": [
						{
							"name": "GetSchema",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Contains query\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.__schema.queryType.name).to.eql(\"query\");",
											"});",
											"",
											"pm.test(\"Contains mutation\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.__schema.mutationType.name).to.eql(\"mutation\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"operationName\":\"IntrospectionQuery\",\"variables\":{},\"query\":\"query IntrospectionQuery {\\n  __schema {\\n    queryType {\\n      name\\n    }\\n    mutationType {\\n      name\\n    }\\n    subscriptionType {\\n      name\\n    }\\n    types {\\n      ...FullType\\n    }\\n    directives {\\n      name\\n      description\\n      locations\\n      args {\\n        ...InputValue\\n      }\\n    }\\n  }\\n}\\n\\nfragment FullType on __Type {\\n  kind\\n  name\\n  description\\n  fields(includeDeprecated: true) {\\n    name\\n    description\\n    args {\\n      ...InputValue\\n    }\\n    type {\\n      ...TypeRef\\n    }\\n    isDeprecated\\n    deprecationReason\\n  }\\n  inputFields {\\n    ...InputValue\\n  }\\n  interfaces {\\n    ...TypeRef\\n  }\\n  enumValues(includeDeprecated: true) {\\n    name\\n    description\\n    isDeprecated\\n    deprecationReason\\n  }\\n  possibleTypes {\\n    ...TypeRef\\n  }\\n}\\n\\nfragment InputValue on __InputValue {\\n  name\\n  description\\n  type {\\n    ...TypeRef\\n  }\\n  defaultValue\\n}\\n\\nfragment TypeRef on __Type {\\n  kind\\n  name\\n  ofType {\\n    kind\\n    name\\n    ofType {\\n      kind\\n      name\\n      ofType {\\n        kind\\n        name\\n        ofType {\\n          kind\\n          name\\n          ofType {\\n            kind\\n            name\\n            ofType {\\n              kind\\n              name\\n              ofType {\\n                kind\\n                name\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n\"}"
								},
								"url": {
									"raw": "{{endpoint}}/api/testsearch/graph",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"api",
										"testsearch",
										"graph"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Seed",
					"item": [
						{
							"name": "SeedModel1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Created data contains 12 items\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.batchCreateModel1.length).to.eql(12);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/graphql",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "mutation{\r\n  batchCreateModel1(model1:\r\n  [ { id:\"model1_1\", dateField: \"2018-01-02\", doubleField: 556.77, field:\"test 1\", intField: 44, type: m1type1 }\r\n\t{ id:\"model1_2\", dateField: \"2016-10-02\", doubleField: 66.71, field:\"test 2\", intField: 4, type: m1type1 }\r\n\t{ id:\"model1_3\", dateField: \"2011-12-02\", doubleField: 55.71, field:\"test 3\", intField: 3, type: m1type2 }\r\n\t{ id:\"model1_4\", dateField: \"2014-12-02\", doubleField: 346.77, field:\"test 4\", intField: 1, type: m1type1 }\r\n\t{ id:\"model1_5\", dateField: \"2010-09-02\", doubleField: 5906.07, field:\"test 5\", intField: 88, type: m1type2 }\r\n\t{ id:\"model1_6\", dateField: \"2000-01-22\", doubleField: 156.97, field:\"test 6\", intField: 76, type: m1type1 }\r\n\t{ id:\"model1_7\", dateField: \"1998-03-12\", doubleField: 89.71, field:\"test 7\", intField: 11, type: m1type1 }\r\n\t{ id:\"model1_8\", dateField: \"2019-02-02\", doubleField: 516.67, field:\"test 8\", intField: 43, type: m1type2 }\r\n\t{ id:\"model1_9\", dateField: \"2009-08-09\", doubleField: 516.99, field:\"test 9\", intField: 134, type: m1type1 }\r\n\t{ id:\"model1_10\", dateField: \"2008-11-12\", doubleField: 15.07, field:\"test 10\", intField: 99, type: m1type1 }\r\n\t{ id:\"model1_11\", dateField: \"2007-06-12\", doubleField: 325.97, field:\"test 11\", intField: 2, type: m1type2 }\r\n\t{ id:\"model1_12\", dateField: \"2005-05-02\", doubleField: 516.71, field:\"test 12\", intField: 4, type: m1type1 } ]){\r\n    id\r\n    intField\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{endpoint}}/api/testsearch/graph",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"api",
										"testsearch",
										"graph"
									]
								}
							},
							"response": []
						},
						{
							"name": "SeedModel2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Created data contains 12 items\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.batchCreateModel2.length).to.eql(12);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/graphql"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "mutation{\r\n  batchCreateModel2(model2:\r\n  [ { id:\"model2_1\", dateField: \"2018-01-02\", doubleField: 556.77, field:\"test 1\", intField: 44, type: m2type1 }\r\n\t{ id:\"model2_2\", dateField: \"2016-10-02\", doubleField: 66.71, field:\"test 2\", intField: 4, type: m2type1 }\r\n\t{ id:\"model2_3\", dateField: \"2011-12-02\", doubleField: 55.71, field:\"test 3\", intField: 3, type: m2type2 }\r\n\t{ id:\"model2_4\", dateField: \"2014-12-02\", doubleField: 346.77, field:\"test 4\", intField: 1 }\r\n\t{ id:\"model2_5\", dateField: \"2010-09-02\", doubleField: 5906.07, field:\"test 5\", intField: 88, type: m2type2 }\r\n\t{ id:\"model2_6\", dateField: \"2000-01-22\", doubleField: 156.97, field:\"test 6\", intField: 76, type: m2type1 }\r\n\t{ id:\"model2_7\", dateField: \"1998-03-12\", doubleField: 89.71, field:\"test 7\", intField: 11, type: m2type1 }\r\n\t{ id:\"model2_8\", dateField: \"2019-02-02\", doubleField: 516.67, field:\"test 8\", intField: 43, type: m2type2 }\r\n\t{ id:\"model2_9\", dateField: \"2009-08-09\", doubleField: 516.99, field:\"test 9\", intField: 134, type: m2type1 }\r\n\t{ id:\"model2_10\", dateField: \"2008-11-12\", doubleField: 15.07, field:\"test 10\", intField: 99 }\r\n\t{ id:\"model2_11\", dateField: \"2007-06-12\", doubleField: 325.97, field:\"test 11\", intField: 2 }\r\n\t{ id:\"model2_12\", dateField: \"2005-05-02\", doubleField: 516.71, field:\"test 12\", intField: 4 } ]){\r\n    id\r\n    intField\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{endpoint}}/api/testsearch/graph",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"api",
										"testsearch",
										"graph"
									]
								}
							},
							"response": []
						},
						{
							"name": "SeedModel3",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Created data contains 12 items\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.batchCreateModel3V2.length).to.eql(17);",
											"});",
											"",
											"setTimeout(function(){}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/graphql"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "mutation{\r\n  batchCreateModel3V2(model3v2:\r\n  [ { id:\"model3_1\", dateField: \"2018-01-02\", doubleField: 556.77, field:\"test 1\", intField: 44, fieldTwo: \"james\", fieldThree: \"apple\" }\r\n\t{ id:\"model3_2\", dateField: \"2016-10-02\", doubleField: 66.71, field:\"test 2\", intField: 4, fieldTwo: \"ryan\", fieldThree: \"pear\" }\r\n\t{ id:\"model3_3\", dateField: \"2011-12-02\", doubleField: 55.71, field:\"test 3\", intField: 3, fieldTwo: \"david\", fieldThree: \"pear\" }\r\n\t{ id:\"model3_4\", dateField: \"2014-12-02\", doubleField: 346.77, field:\"test 4\", intField: 1, fieldTwo: \"james\", fieldThree: \"pinapple\" }\r\n\t{ id:\"model3_5\", dateField: \"2010-09-02\", doubleField: 5906.07, field:\"test 5\", intField: 88, fieldTwo: \"katy\", fieldThree: \"orange\" }\r\n\t{ id:\"model3_6\", dateField: \"2000-01-22\", doubleField: 156.97, field:\"test 6\", intField: 76, fieldTwo: \"sherry\", fieldThree: \"orange\" }\r\n\t{ id:\"model3_7\", dateField: \"1998-03-12\", doubleField: 89.71, field:\"test 7\", intField: 11, fieldTwo: \"ryan\", fieldThree: \"orange\" }\r\n\t{ id:\"model3_8\", dateField: \"2019-02-02\", doubleField: 516.67, field:\"test 8\", intField: 43, fieldTwo: \"katy\", fieldThree: \"orange\" }\r\n\t{ id:\"model3_9\", dateField: \"2009-08-09\", doubleField: 516.99, field:\"test 9\", intField: 134, fieldTwo: \"wendy\", fieldThree: \"lemon\" }\r\n\t{ id:\"model3_10\", dateField: \"2008-11-12\", doubleField: 15.07, field:\"test 10\", intField: 99, fieldTwo: \"eric\", fieldThree: \"mango\" }\r\n\t{ id:\"model3_12\", dateField: \"2005-05-02\", doubleField: 516.71, field:\"test 12\", intField: 4, fieldTwo: \"james\", fieldThree: \"banana\" }\r\n\t{ id:\"model3_14\", dateField: \"2015-09-05\", doubleField: 516.71, field:\"test 12\", intField: 4, fieldTwo: \"jack\", fieldThree: \"fig\" } \r\n\t{ id:\"model3_15\", dateField: \"2014-05-13\", doubleField: 516.71, field:\"test 12\", intField: 4, fieldTwo: \"ryan\", fieldThree: \"Cranberry\" } \r\n\t{ id:\"model3_16\", dateField: \"2013-06-05\", doubleField: 516.71, field:\"test 12\", intField: 4, fieldTwo: \"ryan\", fieldThree: \"Tomato\" } \r\n\t{ id:\"model3_17\", dateField: \"2012-11-02\", doubleField: 516.71, field:\"test 12\", intField: 4, fieldTwo: \"james\", fieldThree: \"Pomegranate\" } \r\n\t{ id:\"model3_18\", dateField: \"2011-04-23\", doubleField: 516.71, field:\"test 12\", intField: 4, fieldTwo: \"brandon\", fieldThree: \"Pumpkin\" } \r\n\t{ id:\"model3_19\", dateField: \"2010-07-12\", doubleField: 516.71, field:\"test 12\", intField: 4, fieldTwo: \"katy\", fieldThree: \"Raspberry\" } \r\n\t\r\n\t]){\r\n    id\r\n    intField\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{endpoint}}/api/testsearch/graph",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"api",
										"testsearch",
										"graph"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "QuerySingleModel1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Found Model\", function () {",
									"    var jsonData = pm.response.json();",
									"    var model = jsonData.data.searchModel1;",
									"    ",
									"    pm.expect(model.id).to.eql(\"model1_5\");",
									"    pm.expect(model.type).to.eql(\"m1type2\");",
									"    ",
									"    pm.expect(model.field).to.eql(\"test 5\");",
									"    pm.expect(model.dateField).to.eql(\"2010-09-02T00:00:00Z\");",
									"    pm.expect(model.doubleField).to.eql(5906.07);",
									"    pm.expect(model.intField).to.eql(88);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "query{\r\n  searchModel1(id:{equal:\"model1_5\"}){\r\n    id\r\n    field\r\n    type\r\n    dateField\r\n    doubleField\r\n    intField\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testsearch/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testsearch",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "QuerySingleModel2WithEnum",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Found Model\", function () {",
									"    var jsonData = pm.response.json();",
									"    var model = jsonData.data.searchModel2;",
									"    ",
									"    pm.expect(model.id).to.eql(\"model2_5\");",
									"    pm.expect(model.type).to.eql(\"m2type2\");",
									"    ",
									"    pm.expect(model.field).to.eql(\"test 5\");",
									"    pm.expect(model.dateField).to.eql(\"2010-09-02T00:00:00Z\");",
									"    pm.expect(model.doubleField).to.eql(5906.07);",
									"    pm.expect(model.intField).to.eql(88);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "query{\r\n  searchModel2(id:{equal:\"model2_5\"}){\r\n    id\r\n    field\r\n    type\r\n    dateField\r\n    doubleField\r\n    intField\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testsearch/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testsearch",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "QuerySingleModel2WithoutEnum",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Found Model\", function () {",
									"    var jsonData = pm.response.json();",
									"    var model = jsonData.data.searchModel2;",
									"    ",
									"    pm.expect(model.id).to.eql(\"model2_4\");",
									"    pm.expect(model.type).to.eql(null);",
									"    pm.expect(model.field).to.eql(\"test 4\");",
									"    pm.expect(model.dateField).to.eql(\"2014-12-02T00:00:00Z\");",
									"    pm.expect(model.doubleField).to.eql(346.77);",
									"    pm.expect(model.intField).to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "query{\r\n  searchModel2(id:{equal:\"model2_4\"}){\r\n    id\r\n    field\r\n    type\r\n    dateField\r\n    doubleField\r\n    intField\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testsearch/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testsearch",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "SearchWithAggregate",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"var searchWithAggregate = jsonData.data.searchWithAggregate;",
									"",
									"pm.test(testName + \"Found Model\", function () {",
									"    pm.expect(searchWithAggregate.results.length).to.eql(4);",
									"    pm.expect(searchWithAggregate.aggregates.length).to.eql(6);",
									"    ",
									"    var found =searchWithAggregate.aggregates.filter(x=>x.fieldName === \"FieldTwo\")[0];",
									"    ",
									"    pm.expect(found.fieldAggregates.length).to.eql(1);",
									"    ",
									"    pm.expect(found.fieldAggregates[0].count).to.eql(4);",
									"    pm.expect(found.fieldAggregates[0].value).to.eql(\"ryan\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n  searchWithAggregate(searchtext:{equal:\"ryan\"}, filters:[ ]){\r\n    results {\r\n      id\r\n      field\r\n    }\r\n    aggregates {\r\n      fieldName\r\n      fieldAggregates {\r\n        count\r\n        value\r\n      }\r\n    }\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/testsearch/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testsearch",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "SearchWithAggregateFilter_StringNotEqual",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(testName + \"Found Model\", function () {",
									"    var jsonData = pm.response.json();",
									"    var searchWithAggregate = jsonData.data.searchWithAggregate;",
									"    ",
									"    pm.expect(searchWithAggregate.results.length).to.eql(2);",
									"    ",
									"    var found = searchWithAggregate.aggregates.filter(x=>x.fieldName === \"FieldTwo\")[0];",
									"    ",
									"    var noKaty = found.fieldAggregates.filter(fa=> fa.value === \"katy\");",
									"    pm.expect(noKaty.length).to.eql(0);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n  searchWithAggregate(searchtext:{equal:\"orange\"},filters:[\r\n    {\r\n      fieldName:\"FieldTwo\"\r\n      fieldValue:\"katy\"\r\n      comparison:notequal\r\n    }\r\n  ]){\r\n    results {\r\n      id\r\n      field\r\n    }\r\n    aggregates {\r\n      fieldName\r\n      fieldAggregates {\r\n        count\r\n        value\r\n      }\r\n    }\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/testsearch/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testsearch",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "SearchWithAggregateFilter_StringEqual",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(testName + \"Found Model\", function () {",
									"    var jsonData = pm.response.json();",
									"    var searchWithAggregate = jsonData.data.searchWithAggregate;",
									"    ",
									"    pm.expect(searchWithAggregate.results.length).to.eql(2);",
									"    ",
									"    var found = searchWithAggregate.aggregates.filter(x=>x.fieldName === \"FieldTwo\")[0];",
									"    ",
									"    var hasKaty = found.fieldAggregates.filter(fa=> fa.value === \"katy\");",
									"    pm.expect(hasKaty.length).to.eql(1);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n  searchWithAggregate(searchtext:{equal:\"orange\"},filters:[\r\n    {\r\n      fieldName:\"FieldTwo\"\r\n      fieldValue:\"katy\"\r\n      comparison:equal\r\n    }\r\n  ]){\r\n    results {\r\n      id\r\n      field\r\n    }\r\n    aggregates {\r\n      fieldName\r\n      fieldAggregates {\r\n        count\r\n        value\r\n      }\r\n    }\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/testsearch/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testsearch",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "SearchWithAggregateFilter_IntEqual",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"var searchWithAggregate = jsonData.data.searchWithAggregate;",
									"",
									"pm.test(\"Finds 1 search result.\", function () {",
									"    pm.expect(searchWithAggregate.results.length).to.eql(1);",
									"    var item = searchWithAggregate.results[0];",
									"    pm.expect(item.id).to.eql(\"model3_5\");    ",
									"});",
									"",
									"pm.test(\"IntField search aggregate is correct.\", function () {",
									"    var found = searchWithAggregate.aggregates.filter(x=>x.fieldName === \"IntField\")[0];",
									"    ",
									"    pm.expect(found.fieldAggregates.length).to.eql(1);",
									"    ",
									"    var agg = found.fieldAggregates.filter(fa=> fa.value === \"88\");",
									"    pm.expect(agg.length).to.eql(1);",
									"",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n  searchWithAggregate(searchtext:{equal:\"orange\"},filters:[\r\n    {\r\n      fieldName:\"intField\"\r\n      fieldValue:\"88\"\r\n      comparison:equal\r\n    }\r\n  ]){\r\n    results {\r\n      id\r\n      field\r\n    }\r\n    aggregates {\r\n      fieldName\r\n      fieldAggregates {\r\n        count\r\n        value\r\n      }\r\n    }\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/testsearch/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testsearch",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "SearchWithAggregateFilter_IntNotEqual",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"var searchWithAggregate = jsonData.data.searchWithAggregate;",
									"",
									"pm.test(\"Found Model\", function () {",
									"",
									"    pm.expect(searchWithAggregate.results.length).to.eql(3);",
									"    ",
									"    var item = searchWithAggregate.results.filter(x=>x.id === \"model3_6\");",
									"    pm.expect(item.length).to.eql(1);",
									"    ",
									"    item = searchWithAggregate.results.filter(x=>x.id === \"model3_7\");",
									"    pm.expect(item.length).to.eql(1);",
									"    item = searchWithAggregate.results.filter(x=>x.id === \"model3_8\");",
									"    pm.expect(item.length).to.eql(1);",
									"    ",
									"    var found = searchWithAggregate.aggregates.filter(x=>x.fieldName === \"IntField\")[0];",
									"    ",
									"    pm.expect(found.fieldAggregates.length).to.eql(3);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n  searchWithAggregate(searchtext:{equal:\"orange\"},filters:[\r\n    {\r\n      fieldName:\"intField\"\r\n      fieldValue:\"88\"\r\n      comparison:notequal\r\n    }\r\n  ]){\r\n    results {\r\n      id\r\n      field\r\n    }\r\n    aggregates {\r\n      fieldName\r\n      fieldAggregates {\r\n        count\r\n        value\r\n      }\r\n    }\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/testsearch/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testsearch",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "SearchWithAggregateFilter_IntGreaterThan",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"var searchWithAggregate = jsonData.data.searchWithAggregate;",
									"",
									"pm.test(\"Finds 1 search result.\", function () {",
									"    pm.expect(searchWithAggregate.results.length).to.eql(1);",
									"    ",
									"    var item = searchWithAggregate.results[0];",
									"    pm.expect(item.id).to.eql(\"model3_5\");",
									"});",
									"",
									"pm.test(\"IntField search aggregate is correct.\", function () {",
									"    var found = searchWithAggregate.aggregates.filter(x=>x.fieldName === \"IntField\")[0];",
									"    var agg = found.fieldAggregates.filter(fa=> fa.value === \"88\");",
									"    pm.expect(agg.length).to.eql(1);    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n  searchWithAggregate(searchtext:{equal:\"orange\"},filters:[\r\n    {\r\n      fieldName:\"intField\"\r\n      fieldValue:\"76\"\r\n      comparison:greaterthan\r\n    }\r\n  ]){\r\n    results {\r\n      id\r\n      field\r\n    }\r\n    aggregates {\r\n      fieldName\r\n      fieldAggregates {\r\n        count\r\n        value\r\n      }\r\n    }\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/testsearch/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testsearch",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "SearchWithAggregateFilter_IntGreaterEqualThan",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"var searchWithAggregate = jsonData.data.searchWithAggregate;",
									"    ",
									"pm.test(\"Finds 2 search results.\", function () {",
									"",
									"    pm.expect(searchWithAggregate.results.length).to.eql(2);",
									"    ",
									"    var item = searchWithAggregate.results.filter(x=>x.id === \"model3_5\");",
									"    pm.expect(item.length).to.eql(1);",
									"    item = searchWithAggregate.results.filter(x=>x.id === \"model3_6\");",
									"    pm.expect(item.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"IntField search aggregate is correct.\", function () {",
									"    var found = searchWithAggregate.aggregates.filter(x=>x.fieldName === \"IntField\")[0];",
									"    pm.expect(found.fieldAggregates.length).to.eql(2);",
									"    ",
									"    var agg = found.fieldAggregates.filter(fa=> fa.value === \"88\");",
									"    pm.expect(agg.length).to.eql(1);",
									"    agg = found.fieldAggregates.filter(fa=> fa.value === \"76\");",
									"    pm.expect(agg.length).to.eql(1);   ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n  searchWithAggregate(searchtext:{equal:\"orange\"},filters:[\r\n    {\r\n      fieldName:\"intField\"\r\n      fieldValue:\"76\"\r\n      comparison:greaterequalthan\r\n    }\r\n  ]){\r\n    results {\r\n      id\r\n      field\r\n    }\r\n    aggregates {\r\n      fieldName\r\n      fieldAggregates {\r\n        count\r\n        value\r\n      }\r\n    }\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/testsearch/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testsearch",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "SearchWithAggregateFilter_IntLessThan",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"var searchWithAggregate = jsonData.data.searchWithAggregate;",
									"    ",
									"pm.test(\"Finds 1 search result.\", function () {",
									"",
									"    pm.expect(searchWithAggregate.results.length).to.eql(1);",
									"    ",
									"    var item = searchWithAggregate.results.filter(x=>x.id === \"model3_7\");",
									"    pm.expect(item.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"IntField search aggregate is correct.\", function () {",
									"    var found = searchWithAggregate.aggregates.filter(x=>x.fieldName === \"IntField\")[0];",
									"    pm.expect(found.fieldAggregates.length).to.eql(1);",
									"    ",
									"    var agg = found.fieldAggregates.filter(fa=> fa.value === \"11\");",
									"    pm.expect(agg.length).to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n  searchWithAggregate(searchtext:{equal:\"orange\"},filters:[\r\n    {\r\n      fieldName:\"intField\"\r\n      fieldValue:\"43\"\r\n      comparison:lessthan\r\n    }\r\n  ]){\r\n    results {\r\n      id\r\n      field\r\n    }\r\n    aggregates {\r\n      fieldName\r\n      fieldAggregates {\r\n        count\r\n        value\r\n      }\r\n    }\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/testsearch/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testsearch",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "SearchWithAggregateFilter_IntLessEqualThan",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"var searchWithAggregate = jsonData.data.searchWithAggregate;",
									"    ",
									"pm.test(\"Finds 2 search results.\", function () {",
									"",
									"    pm.expect(searchWithAggregate.results.length).to.eql(2);",
									"    ",
									"    var item = searchWithAggregate.results.filter(x=>x.id === \"model3_7\");",
									"    pm.expect(item.length).to.eql(1);",
									"    item = searchWithAggregate.results.filter(x=>x.id === \"model3_8\");",
									"    pm.expect(item.length).to.eql(1);    ",
									"});",
									"",
									"pm.test(\"IntField search aggregate is correct.\", function () {",
									"    var found = searchWithAggregate.aggregates.filter(x=>x.fieldName === \"IntField\")[0];",
									"    pm.expect(found.fieldAggregates.length).to.eql(2);",
									"    ",
									"    var agg = found.fieldAggregates.filter(fa=> fa.value === \"11\" && fa.count === 1);",
									"    pm.expect(agg.length).to.eql(1);",
									"    agg = found.fieldAggregates.filter(fa=> fa.value === \"43\" && fa.count === 1);",
									"    pm.expect(agg.length).to.eql(1);    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n  searchWithAggregate(searchtext:{equal:\"orange\"},filters:[\r\n    {\r\n      fieldName:\"intField\"\r\n      fieldValue:\"43\"\r\n      comparison:lessequalthan\r\n    }\r\n  ]){\r\n    results {\r\n      id\r\n      field\r\n    }\r\n    aggregates {\r\n      fieldName\r\n      fieldAggregates {\r\n        count\r\n        value\r\n      }\r\n    }\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/testsearch/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testsearch",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "SearchWithAggregateFilter_DoubleEqual",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"var searchWithAggregate = jsonData.data.searchWithAggregate;",
									"",
									"pm.test(\"Finds 1 search result.\", function () {",
									"    pm.expect(searchWithAggregate.results.length).to.eql(1);",
									"    var item = searchWithAggregate.results[0];",
									"    pm.expect(item.id).to.eql(\"model3_6\");    ",
									"});",
									"",
									"pm.test(\"DoubleField search aggregate is correct.\", function () {",
									"    var found = searchWithAggregate.aggregates.filter(x=>x.fieldName === \"DoubleField\")[0];",
									"    ",
									"    pm.expect(found.fieldAggregates.length).to.eql(1);",
									"    ",
									"    var agg = found.fieldAggregates.filter(fa=> fa.value === \"156.97\");",
									"    pm.expect(agg.length).to.eql(1);",
									"",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n  searchWithAggregate(searchtext:{equal:\"orange\"},filters:[\r\n    {\r\n      fieldName:\"doubleField\"\r\n      fieldValue:\"156.97\"\r\n      comparison:equal\r\n    }\r\n  ]){\r\n    results {\r\n      id\r\n      field\r\n    }\r\n    aggregates {\r\n      fieldName\r\n      fieldAggregates {\r\n        count\r\n        value\r\n      }\r\n    }\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/testsearch/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testsearch",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "SearchWithAggregateFilter_DoubleNotEqual",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"var searchWithAggregate = jsonData.data.searchWithAggregate;",
									"",
									"pm.test(testName + \"Finds 3 search results.\", function () {",
									"    pm.expect(searchWithAggregate.results.length).to.eql(3);",
									"    var item = searchWithAggregate.results.filter(x=> x.id === \"model3_5\");",
									"    pm.expect(item.length).to.eql(1);",
									"    item = searchWithAggregate.results.filter(x=> x.id === \"model3_7\");",
									"    pm.expect(item.length).to.eql(1);",
									"    item = searchWithAggregate.results.filter(x=> x.id === \"model3_8\");",
									"    pm.expect(item.length).to.eql(1);",
									"});",
									"",
									"pm.test(testName + \"DoubleField search aggregate is correct.\", function () {",
									"    var found = searchWithAggregate.aggregates.filter(x=>x.fieldName === \"DoubleField\")[0];",
									"    ",
									"    pm.expect(found.fieldAggregates.length).to.eql(3);",
									"    ",
									"    var agg = found.fieldAggregates.filter(fa=> fa.value === \"5906.07\" && fa.count === 1);",
									"    pm.expect(agg.length).to.eql(1);",
									"    agg = found.fieldAggregates.filter(fa=> fa.value === \"89.71\" && fa.count === 1);",
									"    pm.expect(agg.length).to.eql(1);    ",
									"    agg = found.fieldAggregates.filter(fa=> fa.value === \"516.67\" && fa.count === 1);",
									"    pm.expect(agg.length).to.eql(1);  ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n  searchWithAggregate(searchtext:{equal:\"orange\"},filters:[\r\n    {\r\n      fieldName:\"doubleField\"\r\n      fieldValue:\"156.97\"\r\n      comparison:notequal\r\n    }\r\n  ]){\r\n    results {\r\n      id\r\n      field\r\n    }\r\n    aggregates {\r\n      fieldName\r\n      fieldAggregates {\r\n        count\r\n        value\r\n      }\r\n    }\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/testsearch/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testsearch",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "SearchWithAggregateFilter_DoubleGreaterThan",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"var searchWithAggregate = jsonData.data.searchWithAggregate;",
									"",
									"pm.test(testName + \"Find 1 search results.\", function () {",
									"    pm.expect(searchWithAggregate.results.length).to.eql(1);",
									"    var item = searchWithAggregate.results.filter(x=> x.id === \"model3_5\");",
									"    pm.expect(item.length).to.eql(1);",
									"});",
									"",
									"pm.test(testName + \"DoubleField search aggregate is correct.\", function () {",
									"    var found = searchWithAggregate.aggregates.filter(x=>x.fieldName === \"DoubleField\")[0];",
									"    ",
									"    pm.expect(found.fieldAggregates.length).to.eql(1);",
									"    ",
									"    var agg = found.fieldAggregates.filter(fa=> fa.value === \"5906.07\" && fa.count === 1);",
									"    pm.expect(agg.length).to.eql(1);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n  searchWithAggregate(searchtext:{equal:\"orange\"},filters:[\r\n    {\r\n      fieldName:\"doubleField\"\r\n      fieldValue:\"516.67\"\r\n      comparison:greaterthan\r\n    }\r\n  ]){\r\n    results {\r\n      id\r\n      field\r\n    }\r\n    aggregates {\r\n      fieldName\r\n      fieldAggregates {\r\n        count\r\n        value\r\n      }\r\n    }\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/testsearch/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testsearch",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "SearchWithAggregateFilter_DoubleGreaterEqualThan",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"var searchWithAggregate = jsonData.data.searchWithAggregate;",
									"",
									"pm.test(testName + \"Find 2 search results.\", function () {",
									"    pm.expect(searchWithAggregate.results.length).to.eql(2);",
									"    var item = searchWithAggregate.results.filter(x=> x.id === \"model3_5\");",
									"    pm.expect(item.length).to.eql(1);",
									"    item = searchWithAggregate.results.filter(x=> x.id === \"model3_8\");",
									"    pm.expect(item.length).to.eql(1);    ",
									"});",
									"",
									"pm.test(testName + \"DoubleField search aggregate is correct.\", function () {",
									"    var found = searchWithAggregate.aggregates.filter(x=>x.fieldName === \"DoubleField\")[0];",
									"    ",
									"    pm.expect(found.fieldAggregates.length).to.eql(2);",
									"    ",
									"    var agg = found.fieldAggregates.filter(fa=> fa.value === \"5906.07\" && fa.count === 1);",
									"    pm.expect(agg.length).to.eql(1);",
									"    agg = found.fieldAggregates.filter(fa=> fa.value === \"516.67\" && fa.count === 1);",
									"    pm.expect(agg.length).to.eql(1);    ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n  searchWithAggregate(searchtext:{equal:\"orange\"},filters:[\r\n    {\r\n      fieldName:\"doubleField\"\r\n      fieldValue:\"516.67\"\r\n      comparison:greaterequalthan\r\n    }\r\n  ]){\r\n    results {\r\n      id\r\n      field\r\n    }\r\n    aggregates {\r\n      fieldName\r\n      fieldAggregates {\r\n        count\r\n        value\r\n      }\r\n    }\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/testsearch/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testsearch",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "SearchWithAggregateFilter_DoubleLessEqualThan",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"var searchWithAggregate = jsonData.data.searchWithAggregate;",
									"",
									"pm.test(testName + \"Find 2 search results.\", function () {",
									"    pm.expect(searchWithAggregate.results.length).to.eql(2);",
									"    var item = searchWithAggregate.results.filter(x=> x.id === \"model3_6\");",
									"    pm.expect(item.length).to.eql(1);",
									"    item = searchWithAggregate.results.filter(x=> x.id === \"model3_7\");",
									"    pm.expect(item.length).to.eql(1);    ",
									"});",
									"",
									"pm.test(testName + \"DoubleField search aggregate is correct.\", function () {",
									"    var found = searchWithAggregate.aggregates.filter(x=>x.fieldName === \"DoubleField\")[0];",
									"    ",
									"    pm.expect(found.fieldAggregates.length).to.eql(2);",
									"    ",
									"    var agg = found.fieldAggregates.filter(fa=> fa.value === \"156.97\" && fa.count === 1);",
									"    pm.expect(agg.length).to.eql(1);",
									"    agg = found.fieldAggregates.filter(fa=> fa.value === \"89.71\" && fa.count === 1);",
									"    pm.expect(agg.length).to.eql(1);    ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n  searchWithAggregate(searchtext:{equal:\"orange\"},filters:[\r\n    {\r\n      fieldName:\"doubleField\"\r\n      fieldValue:\"156.97\"\r\n      comparison:lessequalthan\r\n    }\r\n  ]){\r\n    results {\r\n      id\r\n      field\r\n    }\r\n    aggregates {\r\n      fieldName\r\n      fieldAggregates {\r\n        count\r\n        value\r\n      }\r\n    }\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/testsearch/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testsearch",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "SearchWithAggregateFilter_DoubleLessThan",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"var searchWithAggregate = jsonData.data.searchWithAggregate;",
									"",
									"pm.test(testName + \"Find 1 search result.\", function () {",
									"    pm.expect(searchWithAggregate.results.length).to.eql(1);",
									"    var item = searchWithAggregate.results.filter(x=> x.id === \"model3_7\");",
									"    pm.expect(item.length).to.eql(1);",
									"   ",
									"});",
									"",
									"pm.test(testName + \"DoubleField search aggregate is correct.\", function () {",
									"    var found = searchWithAggregate.aggregates.filter(x=>x.fieldName === \"DoubleField\")[0];",
									"    ",
									"    pm.expect(found.fieldAggregates.length).to.eql(1);",
									"    ",
									"    var agg = found.fieldAggregates.filter(fa=> fa.value === \"89.71\" && fa.count === 1);",
									"    pm.expect(agg.length).to.eql(1);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n  searchWithAggregate(searchtext:{equal:\"orange\"},filters:[\r\n    {\r\n      fieldName:\"doubleField\"\r\n      fieldValue:\"156.97\"\r\n      comparison:lessthan\r\n    }\r\n  ]){\r\n    results {\r\n      id\r\n      field\r\n    }\r\n    aggregates {\r\n      fieldName\r\n      fieldAggregates {\r\n        count\r\n        value\r\n      }\r\n    }\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/testsearch/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testsearch",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "SearchWithAggregateFilter_DateTimeOffsetEqual",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"var searchWithAggregate = jsonData.data.searchWithAggregate;",
									"",
									"pm.test(testName + \"Finds 1 search result.\", function () {",
									"    pm.expect(searchWithAggregate.results.length).to.eql(1);",
									"    var item = searchWithAggregate.results[0];",
									"    pm.expect(item.id).to.eql(\"model3_6\");    ",
									"});",
									"",
									"pm.test(testName + \"DateField search aggregate is correct.\", function () {",
									"    var found = searchWithAggregate.aggregates.filter(x=>x.fieldName === \"DateField\")[0];",
									"    ",
									"    pm.expect(found.fieldAggregates.length).to.eql(1);",
									"    ",
									"    var agg = found.fieldAggregates.filter(fa=> fa.value === \"2000-01-22\" && fa.count === 1);",
									"    pm.expect(agg.length).to.eql(1);",
									"",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n  searchWithAggregate(searchtext:{equal:\"orange\"},filters:[\r\n    {\r\n      fieldName:\"dateField\"\r\n      fieldValue:\"2000-01-22\"\r\n      comparison:equal\r\n    }\r\n  ]){\r\n    results {\r\n      id\r\n      field\r\n    }\r\n    aggregates {\r\n      fieldName\r\n      fieldAggregates {\r\n        count\r\n        value\r\n      }\r\n    }\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/testsearch/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testsearch",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "SearchWithAggregateFilter_DateTimeOffsetNotEqual",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"var searchWithAggregate = jsonData.data.searchWithAggregate;",
									"",
									"pm.test(testName + \"Finds 3 search results.\", function () {",
									"    pm.expect(searchWithAggregate.results.length).to.eql(3);",
									"    var item = searchWithAggregate.results.filter(x=>x.id=== \"model3_5\");",
									"    pm.expect(item.length).to.eql(1);",
									"    item = searchWithAggregate.results.filter(x=>x.id=== \"model3_7\");",
									"    pm.expect(item.length).to.eql(1);    ",
									"    item = searchWithAggregate.results.filter(x=>x.id=== \"model3_8\");",
									"    pm.expect(item.length).to.eql(1);        ",
									"});",
									"",
									"pm.test(testName + \"DateField search aggregate is correct.\", function () {",
									"    var found = searchWithAggregate.aggregates.filter(x=>x.fieldName === \"DateField\")[0];",
									"    ",
									"    pm.expect(found.fieldAggregates.length).to.eql(3);",
									"    ",
									"    var agg = found.fieldAggregates.filter(fa=> fa.value === \"2010-09-02\" && fa.count === 1);",
									"    pm.expect(agg.length).to.eql(1);",
									"    agg = found.fieldAggregates.filter(fa=> fa.value === \"1998-03-12\" && fa.count === 1);",
									"    pm.expect(agg.length).to.eql(1);    ",
									"    agg = found.fieldAggregates.filter(fa=> fa.value === \"2019-02-02\" && fa.count === 1);",
									"    pm.expect(agg.length).to.eql(1);  ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n  searchWithAggregate(searchtext:{equal:\"orange\"},filters:[\r\n    {\r\n      fieldName:\"dateField\"\r\n      fieldValue:\"2000-01-22\"\r\n      comparison:notequal\r\n    }\r\n  ]){\r\n    results {\r\n      id\r\n      field\r\n    }\r\n    aggregates {\r\n      fieldName\r\n      fieldAggregates {\r\n        count\r\n        value\r\n      }\r\n    }\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/testsearch/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testsearch",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "SearchWithAggregateFilter_DateTimeOffsetGreaterThan",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"var searchWithAggregate = jsonData.data.searchWithAggregate;",
									"",
									"pm.test(testName + \"Finds 3 search results.\", function () {",
									"    pm.expect(searchWithAggregate.results.length).to.eql(1);",
									"    var item = searchWithAggregate.results.filter(x=>x.id=== \"model3_8\");",
									"    pm.expect(item.length).to.eql(1);        ",
									"});",
									"",
									"pm.test(testName + \"DateField search aggregate is correct.\", function () {",
									"    var found = searchWithAggregate.aggregates.filter(x=>x.fieldName === \"DateField\")[0];",
									"    ",
									"    pm.expect(found.fieldAggregates.length).to.eql(1);",
									"    ",
									"    var agg = found.fieldAggregates.filter(fa=> fa.value === \"2019-02-02\" && fa.count === 1);",
									"    pm.expect(agg.length).to.eql(1);  ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n  searchWithAggregate(searchtext:{equal:\"orange\"},filters:[\r\n    {\r\n      fieldName:\"dateField\"\r\n      fieldValue:\"2010-09-02\"\r\n      comparison:greaterthan\r\n    }\r\n  ]){\r\n    results {\r\n      id\r\n      field\r\n    }\r\n    aggregates {\r\n      fieldName\r\n      fieldAggregates {\r\n        count\r\n        value\r\n      }\r\n    }\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/testsearch/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testsearch",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "SearchWithAggregateFilter_DateTimeOffsetGreaterEqualThan",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"var searchWithAggregate = jsonData.data.searchWithAggregate;",
									"",
									"pm.test(testName + \"Finds 2 search results.\", function () {",
									"    pm.expect(searchWithAggregate.results.length).to.eql(2);",
									"    var item = searchWithAggregate.results.filter(x=>x.id=== \"model3_5\");",
									"    pm.expect(item.length).to.eql(1);",
									"    item = searchWithAggregate.results.filter(x=>x.id=== \"model3_8\");",
									"    pm.expect(item.length).to.eql(1);        ",
									"});",
									"",
									"pm.test(testName + \"DateField search aggregate is correct.\", function () {",
									"    var found = searchWithAggregate.aggregates.filter(x=>x.fieldName === \"DateField\")[0];",
									"    ",
									"    pm.expect(found.fieldAggregates.length).to.eql(2);",
									"    ",
									"    var agg = found.fieldAggregates.filter(fa=> fa.value === \"2010-09-02\" && fa.count === 1);",
									"    pm.expect(agg.length).to.eql(1);",
									"    agg = found.fieldAggregates.filter(fa=> fa.value === \"2019-02-02\" && fa.count === 1);",
									"    pm.expect(agg.length).to.eql(1);  ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n  searchWithAggregate(searchtext:{equal:\"orange\"},filters:[\r\n    {\r\n      fieldName:\"dateField\"\r\n      fieldValue:\"2010-09-02\"\r\n      comparison:greaterequalthan\r\n    }\r\n  ]){\r\n    results {\r\n      id\r\n      field\r\n    }\r\n    aggregates {\r\n      fieldName\r\n      fieldAggregates {\r\n        count\r\n        value\r\n      }\r\n    }\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/testsearch/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testsearch",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "SearchWithAggregateFilter_DateTimeOffsetLessEqualThan",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"var searchWithAggregate = jsonData.data.searchWithAggregate;",
									"",
									"pm.test(testName + \"Finds 2 search results.\", function () {",
									"    pm.expect(searchWithAggregate.results.length).to.eql(2);",
									"    var item = searchWithAggregate.results.filter(x=>x.id=== \"model3_6\");",
									"    pm.expect(item.length).to.eql(1);",
									"    item = searchWithAggregate.results.filter(x=>x.id=== \"model3_7\");",
									"    pm.expect(item.length).to.eql(1);",
									"});",
									"",
									"pm.test(testName + \"DateField search aggregate is correct.\", function () {",
									"    var found = searchWithAggregate.aggregates.filter(x=>x.fieldName === \"DateField\")[0];",
									"    ",
									"    pm.expect(found.fieldAggregates.length).to.eql(2);",
									"    ",
									"    var agg = found.fieldAggregates.filter(fa=> fa.value === \"2000-01-22\" && fa.count === 1);",
									"    pm.expect(agg.length).to.eql(1);",
									"    agg = found.fieldAggregates.filter(fa=> fa.value === \"1998-03-12\" && fa.count === 1);",
									"    pm.expect(agg.length).to.eql(1);    ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n  searchWithAggregate(searchtext:{equal:\"orange\"},filters:[\r\n    {\r\n      fieldName:\"dateField\"\r\n      fieldValue:\"2000-01-22\"\r\n      comparison:lessequalthan\r\n    }\r\n  ]){\r\n    results {\r\n      id\r\n      field\r\n    }\r\n    aggregates {\r\n      fieldName\r\n      fieldAggregates {\r\n        count\r\n        value\r\n      }\r\n    }\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/testsearch/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testsearch",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "SearchWithAggregateFilter_DateTimeOffsetLessThan",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"var searchWithAggregate = jsonData.data.searchWithAggregate;",
									"",
									"pm.test(testName + \"Finds 1 search result.\", function () {",
									"    pm.expect(searchWithAggregate.results.length).to.eql(1);",
									"    var item = searchWithAggregate.results.filter(x=>x.id=== \"model3_7\");",
									"    pm.expect(item.length).to.eql(1);",
									"});",
									"",
									"pm.test(testName + \"DateField search aggregate is correct.\", function () {",
									"    var found = searchWithAggregate.aggregates.filter(x=>x.fieldName === \"DateField\")[0];",
									"    ",
									"    pm.expect(found.fieldAggregates.length).to.eql(1);",
									"    ",
									"    var agg = found.fieldAggregates.filter(fa=> fa.value === \"1998-03-12\" && fa.count === 1);",
									"    pm.expect(agg.length).to.eql(1);    ",
									"",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n  searchWithAggregate(searchtext:{equal:\"orange\"},filters:[\r\n    {\r\n      fieldName:\"dateField\"\r\n      fieldValue:\"2000-01-22\"\r\n      comparison:lessthan\r\n    }\r\n  ]){\r\n    results {\r\n      id\r\n      field\r\n    }\r\n    aggregates {\r\n      fieldName\r\n      fieldAggregates {\r\n        count\r\n        value\r\n      }\r\n    }\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/testsearch/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testsearch",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "CleanupModel1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(testName + \"No errors.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eq(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/graphql",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "mutation {\r\n  deleteAllModel1{\r\n    message\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testsearch/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testsearch",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "CleanupModel2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(testName + \"No errors.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eq(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "mutation {\r\n  deleteAllModel2{\r\n    message\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testsearch/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testsearch",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "CleanupModel3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(testName + \"No errors.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eq(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "mutation {\r\n  deleteAllModel3V2{\r\n    message\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testsearch/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testsearch",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteSearchIndexes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{endpoint}}/api/searchIndexes",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"searchIndexes"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "TestSearch2",
			"item": [
				{
					"name": "GetSchema",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Contains query\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.__schema.queryType.name).to.eql(\"query\");",
									"});",
									"",
									"pm.test(\"Contains mutation\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.__schema.mutationType.name).to.eql(\"mutation\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":\"IntrospectionQuery\",\"variables\":{},\"query\":\"query IntrospectionQuery {\\n  __schema {\\n    queryType {\\n      name\\n    }\\n    mutationType {\\n      name\\n    }\\n    subscriptionType {\\n      name\\n    }\\n    types {\\n      ...FullType\\n    }\\n    directives {\\n      name\\n      description\\n      locations\\n      args {\\n        ...InputValue\\n      }\\n    }\\n  }\\n}\\n\\nfragment FullType on __Type {\\n  kind\\n  name\\n  description\\n  fields(includeDeprecated: true) {\\n    name\\n    description\\n    args {\\n      ...InputValue\\n    }\\n    type {\\n      ...TypeRef\\n    }\\n    isDeprecated\\n    deprecationReason\\n  }\\n  inputFields {\\n    ...InputValue\\n  }\\n  interfaces {\\n    ...TypeRef\\n  }\\n  enumValues(includeDeprecated: true) {\\n    name\\n    description\\n    isDeprecated\\n    deprecationReason\\n  }\\n  possibleTypes {\\n    ...TypeRef\\n  }\\n}\\n\\nfragment InputValue on __InputValue {\\n  name\\n  description\\n  type {\\n    ...TypeRef\\n  }\\n  defaultValue\\n}\\n\\nfragment TypeRef on __Type {\\n  kind\\n  name\\n  ofType {\\n    kind\\n    name\\n    ofType {\\n      kind\\n      name\\n      ofType {\\n        kind\\n        name\\n        ofType {\\n          kind\\n          name\\n          ofType {\\n            kind\\n            name\\n            ofType {\\n              kind\\n              name\\n              ofType {\\n                kind\\n                name\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testsearch2/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testsearch2",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "SeedModel4",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.test(testName + \"Created data is corect\", function () {",
									"",
									"    pm.expect(jsonData.data.batchCreateMySearch4.length).to.eql(5);",
									"    var j = jsonData.data.batchCreateMySearch4[0];",
									"    pm.expect(j.state).to.eql(\"foo\");",
									"    pm.expect(j.field).to.eql(\"1245 Main St, Allen TX 75011\");",
									"    ",
									"    var j2 = jsonData.data.batchCreateMySearch4[1];",
									"    pm.expect(j2.state).to.eql(\"bar\");",
									"    pm.expect(j2.field).to.eql(\"31 Kan, Frisco TX 75011\");",
									"    ",
									"    var j3 = jsonData.data.batchCreateMySearch4[2];",
									"    pm.expect(j3.state).to.eql(\"bar\");",
									"    pm.expect(j3.field).to.eql(\"1245 Main St, Plano TX 75221\");",
									"    ",
									"    var j4 = jsonData.data.batchCreateMySearch4[3];",
									"    pm.expect(j4.state).to.eql(\"bar\");",
									"    pm.expect(j4.field).to.eql(\"56 Red St, Allen CA 15111\");    ",
									"    ",
									"    var j5 = jsonData.data.batchCreateMySearch4[4];",
									"    pm.expect(j5.state).to.eql(\"one\");",
									"    pm.expect(j5.field).to.eql(\"900 West Lake, Lorado TX 71234\");        ",
									"});",
									"",
									"setTimeout(function(){",
									"    console.log(\"Done!\");",
									"}, 1000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "mutation {\r\n  batchCreateMySearch4(mysearch4:[{\r\n    id:\"@\"\r\n    state: \"foo\"\r\n    field:\"1245 Main St, Allen TX 75011\"\r\n    list5:[ {\r\n       id:\"james bing\"\r\n       intField: 12340\r\n    },\r\n    {\r\n       id:\"mary johnson\"\r\n       intField: 12345\r\n    },\r\n    {\r\n       id:\"wayn rose\"\r\n       intField: 12344\r\n    }\r\n    ],\r\n    list6:[{\r\n      id: \"rose\"\r\n      mySearch8:{\r\n        id:\"aa\"\r\n        strField:\"aa bb cc\"\r\n      }\r\n      list7: [{\r\n        \tid: \"canada\"\r\n        \tdobField: 12567.99\r\n      \t}\r\n      ]\r\n      strField: \"jacksonville\"\r\n    }]\r\n  },\r\n  {\r\n    id:\"@\"\r\n    state: \"bar\"\r\n    field:\"31 Kan, Frisco TX 75011\"\r\n    list5:[{\r\n       id:\"han pong\"\r\n       intField: 98811\r\n    }]\r\n  },\r\n  {\r\n    id:\"@\"\r\n    state: \"bar\"\r\n    field:\"1245 Main St, Plano TX 75221\"\r\n  },\r\n  {\r\n    id:\"@\"\r\n    state: \"bar\"\r\n    field:\"56 Red St, Allen CA 15111\"\r\n  },\r\n  {\r\n    id:\"@\"\r\n    state: \"one\"\r\n    field:\"900 West Lake, Lorado TX 71234\"\r\n    list5:[{\r\n       id:\"jasmin wong\"\r\n       intField: 56781\r\n    },{\r\n       id:\"mike wong\"\r\n       intField: 12381\r\n    }]    \r\n  }  \r\n  ]){\r\n    id\r\n    field\r\n    state\r\n    list5 {\r\n      id\r\n      intField\r\n    }\r\n    list6 {\r\n      id\r\n      strField\r\n      mySearch8 {\r\n        id\r\n        strField\r\n      }\r\n    }    \r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testsearch2/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testsearch2",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "QueryModel4_FirstLevel",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"var model = jsonData.data.searchModel4;",
									"var results = model.results; ",
									"pm.test(testName + \"Created results is corect\", function () {",
									"",
									"    pm.expect(results.length).to.eql(2);",
									"    var j = model.results.filter(x=> x.state === \"foo\")[0];",
									"    pm.expect(j.field).to.eql(\"1245 Main St, Allen TX 75011\");",
									"    ",
									"    var j2 = results.filter(x=> x.state === \"bar\")[0];",
									"    pm.expect(j2.field).to.eql(\"56 Red St, Allen CA 15111\");    ",
									"});",
									"",
									"var aggregates = model.aggregates;",
									"pm.test(testName + \"Created aggregates is corect\", function () {",
									"    pm.expect(aggregates.length).to.eql(1);",
									"    pm.expect(aggregates[0].fieldName).to.eql(\"State\");",
									"    pm.expect(aggregates[0].fieldAggregates.length).to.eql(2);",
									"    ",
									"    var a1 = aggregates[0].fieldAggregates.filter(x=>x.value === \"bar\")[0];",
									"    pm.expect(a1.count).to.eql(1);",
									"    ",
									"    var a2 = aggregates[0].fieldAggregates.filter(x=>x.value === \"foo\")[0];",
									"    pm.expect(a2.count).to.eql(1);    ",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "query{\r\n  searchModel4(searchtext:{equal:\"Allen\"}, filters:[]){\r\n\tresults {\r\n\t    id\r\n\t    field\r\n\t    state\r\n\t    list5 {\r\n\t      id\r\n\t      intField\r\n\t    }\r\n\t    list6 {\r\n\t      id\r\n\t      strField\r\n\t      mySearch8 {\r\n\t        id\r\n\t        strField\r\n\t      }\r\n\t    }\r\n\t  }\r\n   aggregates {\r\n    fieldName\r\n    fieldAggregates {\r\n      count\r\n      value\r\n    }\r\n  } \t  \r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testsearch2/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testsearch2",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "QueryModel4_FirstLevelWithFilter",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"var model = jsonData.data.searchModel4;",
									"var results = model.results; ",
									"pm.test(testName + \"Created results is corect\", function () {",
									"",
									"    pm.expect(results.length).to.eql(1);",
									"",
									"    var j1 = results.filter(x=> x.state === \"bar\")[0];",
									"    pm.expect(j1.field).to.eql(\"56 Red St, Allen CA 15111\");    ",
									"});",
									"",
									"var aggregates = model.aggregates;",
									"pm.test(testName + \"Created aggregates is corect\", function () {",
									"    pm.expect(aggregates.length).to.eql(1);",
									"    pm.expect(aggregates[0].fieldName).to.eql(\"State\");",
									"    pm.expect(aggregates[0].fieldAggregates.length).to.eql(1);",
									"    ",
									"    var a1 = aggregates[0].fieldAggregates.filter(x=>x.value === \"bar\")[0];",
									"    pm.expect(a1.count).to.eql(1);",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "query{\r\n  searchModel4(searchtext:{equal:\"Allen\"}, filters:[{\r\n    comparison:equal\r\n    fieldName:\"State\"\r\n    fieldValue:\"bar\"\r\n  }]){\r\n\tresults {\r\n    id\r\n    field\r\n    state\r\n    list5 {\r\n      id\r\n      intField\r\n    }\r\n    list6 {\r\n      id\r\n      strField\r\n      mySearch8 {\r\n        id\r\n        strField\r\n      }\r\n    }\r\n  }\r\n   aggregates {\r\n    fieldName\r\n    fieldAggregates {\r\n      count\r\n      value\r\n    }\r\n  } \r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testsearch2/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testsearch2",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "QueryModel4_FirstLevelNoFilter",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"var model = jsonData.data.searchModel4;",
									"var results = model.results; ",
									"pm.test(testName + \"Created results is corect\", function () {",
									"",
									"    pm.expect(results.length).to.eql(2);",
									"    var j = model.results.filter(x=> x.state === \"foo\")[0];",
									"    pm.expect(j.field).to.eql(\"1245 Main St, Allen TX 75011\");",
									"    ",
									"    var j2 = results.filter(x=> x.state === \"bar\")[0];",
									"    pm.expect(j2.field).to.eql(\"56 Red St, Allen CA 15111\");    ",
									"});",
									"",
									"var aggregates = model.aggregates;",
									"pm.test(testName + \"Created aggregates is corect\", function () {",
									"    pm.expect(aggregates.length).to.eql(1);",
									"    pm.expect(aggregates[0].fieldName).to.eql(\"State\");",
									"    pm.expect(aggregates[0].fieldAggregates.length).to.eql(2);",
									"    ",
									"    var a1 = aggregates[0].fieldAggregates.filter(x=>x.value === \"bar\")[0];",
									"    pm.expect(a1.count).to.eql(1);",
									"    ",
									"    var a2 = aggregates[0].fieldAggregates.filter(x=>x.value === \"foo\")[0];",
									"    pm.expect(a2.count).to.eql(1);    ",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "query{\r\n  searchModel4(searchtext:{equal:\"Allen\"}){\r\n\tresults {\r\n\t    id\r\n\t    field\r\n\t    state\r\n\t    list5 {\r\n\t      id\r\n\t      intField\r\n\t    }\r\n\t    list6 {\r\n\t      id\r\n\t      strField\r\n\t      mySearch8 {\r\n\t        id\r\n\t        strField\r\n\t      }\r\n\t    }\r\n\t  }\r\n   aggregates {\r\n    fieldName\r\n    fieldAggregates {\r\n      count\r\n      value\r\n    }\r\n  } \t  \r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testsearch2/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testsearch2",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "QueryModel4_SecondLevel",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"var model = jsonData.data.searchModel4;",
									"var results = model.results; ",
									"",
									"pm.test(testName + \"Created data is corect\", function () {",
									"",
									"    pm.expect(results.length).to.eql(1);",
									"    var j = results.filter(x=> x.state === \"bar\")[0];",
									"    pm.expect(j.field).to.eql(\"31 Kan, Frisco TX 75011\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "query{\r\n  searchModel4(searchtext:{equal:\"han pong\"}, filters:[]){\r\n\tresults {\r\n\t    id\r\n\t    field\r\n\t    state\r\n\t    list5 {\r\n\t      id\r\n\t      intField\r\n\t    }\r\n\t    list6 {\r\n\t      id\r\n\t      strField\r\n\t      mySearch8 {\r\n\t        id\r\n\t        strField\r\n\t      }\r\n\t    }\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testsearch2/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testsearch2",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "QueryModel4_LastLevel",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"var model = jsonData.data.searchModel4;",
									"var results = model.results; ",
									"",
									"pm.test(testName + \"Created data is corect\", function () {",
									"",
									"    pm.expect(results.length).to.eql(1);",
									"    var j = results.filter(x=> x.state === \"foo\")[0];",
									"    pm.expect(j.field).to.eql(\"1245 Main St, Allen TX 75011\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "query{\r\n  searchModel4(searchtext:{equal:\"canada\"}, filters:[]){\r\n\tresults {\r\n\t    id\r\n\t    field\r\n\t    state\r\n\t    list5 {\r\n\t      id\r\n\t      intField\r\n\t    }\r\n\t    list6 {\r\n\t      id\r\n\t      strField\r\n\t      mySearch8 {\r\n\t        id\r\n\t        strField\r\n\t      }\r\n\t    }\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testsearch2/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testsearch2",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "CleanupModel4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(testName + \"No errors.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eq(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "mutation {\r\n  deleteAllMySearch4{\r\n    message\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testsearch2/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testsearch2",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteSearchIndexes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{endpoint}}/api/searchIndexes",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"searchIndexes"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "TestDocumentDb",
			"item": [
				{
					"name": "Init",
					"item": [
						{
							"name": "GetSchema",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Contains query\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.__schema.queryType.name).to.eql(\"query\");",
											"});",
											"",
											"pm.test(\"Contains mutation\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.__schema.mutationType.name).to.eql(\"mutation\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"operationName\":\"IntrospectionQuery\",\"variables\":{},\"query\":\"query IntrospectionQuery {\\n  __schema {\\n    queryType {\\n      name\\n    }\\n    mutationType {\\n      name\\n    }\\n    subscriptionType {\\n      name\\n    }\\n    types {\\n      ...FullType\\n    }\\n    directives {\\n      name\\n      description\\n      locations\\n      args {\\n        ...InputValue\\n      }\\n    }\\n  }\\n}\\n\\nfragment FullType on __Type {\\n  kind\\n  name\\n  description\\n  fields(includeDeprecated: true) {\\n    name\\n    description\\n    args {\\n      ...InputValue\\n    }\\n    type {\\n      ...TypeRef\\n    }\\n    isDeprecated\\n    deprecationReason\\n  }\\n  inputFields {\\n    ...InputValue\\n  }\\n  interfaces {\\n    ...TypeRef\\n  }\\n  enumValues(includeDeprecated: true) {\\n    name\\n    description\\n    isDeprecated\\n    deprecationReason\\n  }\\n  possibleTypes {\\n    ...TypeRef\\n  }\\n}\\n\\nfragment InputValue on __InputValue {\\n  name\\n  description\\n  type {\\n    ...TypeRef\\n  }\\n  defaultValue\\n}\\n\\nfragment TypeRef on __Type {\\n  kind\\n  name\\n  ofType {\\n    kind\\n    name\\n    ofType {\\n      kind\\n      name\\n      ofType {\\n        kind\\n        name\\n        ofType {\\n          kind\\n          name\\n          ofType {\\n            kind\\n            name\\n            ofType {\\n              kind\\n              name\\n              ofType {\\n                kind\\n                name\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n\"}"
								},
								"url": {
									"raw": "{{endpoint}}/api/testdocumentdb/graph",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"api",
										"testdocumentdb",
										"graph"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Seed",
					"item": [
						{
							"name": "SeedModel1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var testName = pm.info.requestName + \": \";",
											"",
											"pm.test(testName + \"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(testName + \"Created data contains 12 items\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.batchCreateModel1.length).to.eql(12);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/graphql",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "mutation{\r\n  batchCreateModel1(model1:\r\n  [ { id:\"model1_1\", dateField: \"2018-01-02\", doubleField: 556.77, field:\"test 1\", intField: 44, type: m1type1 }\r\n\t{ id:\"model1_2\", dateField: \"2016-10-02\", doubleField: 66.71, field:\"test 2\", intField: 4, type: m1type1 }\r\n\t{ id:\"model1_3\", dateField: \"2011-12-02\", doubleField: 55.71, field:\"test 3\", intField: 3, type: m1type2 }\r\n\t{ id:\"model1_4\", dateField: \"2014-12-02\", doubleField: 346.77, field:\"test 4\", intField: 1, type: m1type1 }\r\n\t{ id:\"model1_5\", dateField: \"2010-09-02\", doubleField: 5906.07, field:\"test 5\", intField: 88, type: m1type2 }\r\n\t{ id:\"model1_6\", dateField: \"2000-01-22\", doubleField: 156.97, field:\"test 6\", intField: 76, type: m1type1 }\r\n\t{ id:\"model1_7\", dateField: \"1998-03-12\", doubleField: 89.71, field:\"test 7\", intField: 11, type: m1type1 }\r\n\t{ id:\"model1_8\", dateField: \"2019-02-02\", doubleField: 516.67, field:\"test 8\", intField: 43, type: m1type2 }\r\n\t{ id:\"model1_9\", dateField: \"2009-08-09\", doubleField: 516.99, field:\"test 9\", intField: 134, type: m1type1 }\r\n\t{ id:\"model1_10\", dateField: \"2008-11-12\", doubleField: 15.07, field:\"test 10\", intField: 99, type: m1type1 }\r\n\t{ id:\"model1_11\", dateField: \"2007-06-12\", doubleField: 325.97, field:\"test 11\", intField: 2, type: m1type2 }\r\n\t{ id:\"model1_12\", dateField: \"2005-05-02\", doubleField: 516.71, field:\"test 12\", intField: 4, type: m1type1 } ]){\r\n    id\r\n    intField\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{endpoint}}/api/testdocumentdb/graph",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"api",
										"testdocumentdb",
										"graph"
									]
								}
							},
							"response": []
						},
						{
							"name": "SeedModel2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var testName = pm.info.requestName + \": \";",
											"",
											"pm.test(testName + \"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(testName + \"Created data contains 12 items\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.batchCreateModel2.length).to.eql(12);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/graphql"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "mutation{\r\n  batchCreateModel2(model2:\r\n  [ { id:\"model2_1\", dateField: \"2018-01-02\", doubleField: 556.77, field:\"test 1\", intField: 44, type: m2type1 }\r\n\t{ id:\"model2_2\", dateField: \"2016-10-02\", doubleField: 66.71, field:\"test 2\", intField: 4, type: m2type1 }\r\n\t{ id:\"model2_3\", dateField: \"2011-12-02\", doubleField: 55.71, field:\"test 3\", intField: 3, type: m2type2 }\r\n\t{ id:\"model2_4\", dateField: \"2014-12-02\", doubleField: 346.77, field:\"test 4\", intField: 1 }\r\n\t{ id:\"model2_5\", dateField: \"2010-09-02\", doubleField: 5906.07, field:\"test 5\", intField: 88, type: m2type2 }\r\n\t{ id:\"model2_6\", dateField: \"2000-01-22\", doubleField: 156.97, field:\"test 6\", intField: 76, type: m2type1 }\r\n\t{ id:\"model2_7\", dateField: \"1998-03-12\", doubleField: 89.71, field:\"test 7\", intField: 11, type: m2type1 }\r\n\t{ id:\"model2_8\", dateField: \"2019-02-02\", doubleField: 516.67, field:\"test 8\", intField: 43, type: m2type2 }\r\n\t{ id:\"model2_9\", dateField: \"2009-08-09\", doubleField: 516.99, field:\"test 9\", intField: 134, type: m2type1 }\r\n\t{ id:\"model2_10\", dateField: \"2008-11-12\", doubleField: 15.07, field:\"test 10\", intField: 99 }\r\n\t{ id:\"model2_11\", dateField: \"2007-06-12\", doubleField: 325.97, field:\"test 11\", intField: 2 }\r\n\t{ id:\"model2_12\", dateField: \"2005-05-02\", doubleField: 516.71, field:\"test 12\", intField: 4 } ]){\r\n    id\r\n    intField\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{endpoint}}/api/testdocumentdb/graph",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"api",
										"testdocumentdb",
										"graph"
									]
								}
							},
							"response": []
						},
						{
							"name": "SeedModel3",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var testName = pm.info.requestName + \": \";",
											"",
											"pm.test(testName + \"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(testName + \"Created data contains 12 items\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.batchCreateModel3.length).to.eql(11);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/graphql"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "mutation{\r\n  batchCreateModel3(model3:\r\n  [ { id:\"model3_1\", dateField: \"2018-01-02\", doubleField: 556.77, field:\"test 1\", intField: 44 }\r\n\t{ id:\"model3_2\", dateField: \"2016-10-02\", doubleField: 66.71, field:\"test 2\", intField: 4 }\r\n\t{ id:\"model3_3\", dateField: \"2011-12-02\", doubleField: 55.71, field:\"test 3\", intField: 3 }\r\n\t{ id:\"model3_4\", dateField: \"2014-12-02\", doubleField: 346.77, field:\"test 4\", intField: 1 }\r\n\t{ id:\"model3_5\", dateField: \"2010-09-02\", doubleField: 5906.07, field:\"test 5\", intField: 88 }\r\n\t{ id:\"model3_6\", dateField: \"2000-01-22\", doubleField: 156.97, field:\"test 6\", intField: 76 }\r\n\t{ id:\"model3_7\", dateField: \"1998-03-12\", doubleField: 89.71, field:\"test 7\", intField: 11 }\r\n\t{ id:\"model3_8\", dateField: \"2019-02-02\", doubleField: 516.67, field:\"test 8\", intField: 43 }\r\n\t{ id:\"model3_9\", dateField: \"2009-08-09\", doubleField: 516.99, field:\"test 9\", intField: 134 }\r\n\t{ id:\"model3_10\", dateField: \"2008-11-12\", doubleField: 15.07, field:\"test 10\", intField: 99 }\r\n\t{ id:\"model3_12\", dateField: \"2005-05-02\", doubleField: 516.71, field:\"test 12\", intField: 4 } ]){\r\n    id\r\n    intField\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{endpoint}}/api/testdocumentdb/graph",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"api",
										"testdocumentdb",
										"graph"
									]
								}
							},
							"response": []
						},
						{
							"name": "SeedModel4",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has 2 errors\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.length).to.eql(3);",
											"    ",
											"    var errorDateTime = jsonData.errors.filter(function(item){",
											"        return item.code === \"DateTimeError\";",
											"    });",
											"    ",
											"    pm.expect(errorDateTime.length).to.eql(1);",
											"    ",
											"    var invalidStringLength = jsonData.errors.filter(function(item){",
											"        return item.code === \"InvalidStringLength\";",
											"    });",
											"    ",
											"    pm.expect(invalidStringLength.length).to.eql(2);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/graphql"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "mutation{\r\n  batchCreateModel4(model4:\r\n  [ { id:\"model4_1\", dateField: \"01-01-0001\", doubleField: 556.77, field:\"test 1\", intField: 44 }\r\n\t{ id:\"model4_2\", dateField: \"2018-01-02\", doubleField: 66.71, field:\"t\", intField: 4 }\r\n\t{ id:\"model4_3\", dateField: \"2018-11-12\", doubleField: 66.71, field:\"abcdefghijk\", intField: 4 }\r\n\t]) {\r\n    id\r\n    intField\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{endpoint}}/api/testdocumentdb/graph",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"api",
										"testdocumentdb",
										"graph"
									]
								}
							},
							"response": []
						},
						{
							"name": "SeedModel6",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has no errors\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors).to.eql(null);",
											"});",
											"",
											"pm.test(\"Contains correct JSON payload\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.expect(jsonData.data.batchCreateOrUpdateModel6.length).to.eql(3);",
											"    ",
											"    var model1 = jsonData.data.batchCreateOrUpdateModel6[0];",
											"    ",
											"    pm.expect(model1.id).to.eql(\"model6_1\");",
											"    pm.expect(model1.field).to.eql(\"model6_1\");",
											"    pm.expect(model1.bestFriends[0].id).to.eql(\"model6_2\");",
											"    pm.expect(model1.bestFriends[1].id).to.eql(\"model6_3\");",
											"    ",
											"    var model2 = jsonData.data.batchCreateOrUpdateModel6[1];",
											"    pm.expect(model2.id).to.eql(\"model6_2\");",
											"    pm.expect(model2.field).to.eql(\"model6_2\");",
											"    ",
											"    var model3 = jsonData.data.batchCreateOrUpdateModel6[2];",
											"    pm.expect(model3.id).to.eql(\"model6_3\");",
											"    pm.expect(model3.field).to.eql(\"model6_3\");",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/graphql"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "mutation{\r\n  batchCreateOrUpdateModel6(model6:[{\r\n    id:\"model6_1\"\r\n    field:\"model6_1\"\r\n    intField: 22\r\n    dateField:\"2019-07-21\"\r\n    doubleField: 78.91\r\n    bestFriends:[{\r\n      id:\"model6_2\"\r\n      field:\"some info about this friend model 2\"\r\n    },\r\n    {\r\n      id:\"model6_3\"\r\n      field:\"some info about this friend model 3\"\r\n    },\r\n    {\r\n        id: \"model6_4\",\r\n        field: \"some info about this friend model 4\",\r\n        theFriend : {\r\n        \tid: \"model6_4\"\r\n        \tfield : \"model6_4\"\r\n        \tintField: 18\r\n    \t\tdateField:\"2019-01-20\"\r\n    \t\tdoubleField: 8.12\r\n        }\r\n    }\r\n    ] \r\n  }, \r\n\t{\r\n     id:\"model6_2\"\r\n    field:\"model6_2\"\r\n    intField: 21\r\n    dateField:\"2019-07-21\"\r\n    doubleField: 17.01     \r\n  } , \r\n\t{\r\n     id:\"model6_3\"\r\n    field:\"model6_3\"\r\n    intField: 20\r\n    dateField:\"2011-01-21\"\r\n    doubleField: 9.12     \r\n  }   \r\n  \r\n  ]){\r\n    id\r\n    field\r\n    bestFriends {\r\n      id\r\n      field\r\n    }\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{endpoint}}/api/testdocumentdb/graph",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"api",
										"testdocumentdb",
										"graph"
									]
								}
							},
							"response": []
						},
						{
							"name": "SeedModel7",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has no errors\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors).to.eql(null);",
											"});",
											"",
											"pm.test(\"Contains correct JSON payload\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.batchCreateOrUpdateModel7.length).to.eql(3);",
											"    ",
											"    var model1 = jsonData.data.batchCreateOrUpdateModel7[0];",
											"    pm.expect(model1.id).to.eql(\"model7_1\");",
											"    ",
											"    var model2 = jsonData.data.batchCreateOrUpdateModel7[1];",
											"    pm.expect(model2.id).to.eql(\"model7_2\");",
											"    ",
											"    var model3 = jsonData.data.batchCreateOrUpdateModel7[2];",
											"    pm.expect(model3.id).to.eql(\"model7_3\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/graphql"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "mutation {\r\n  batchCreateOrUpdateModel7(model7:[{\r\n    id:\"model7_1\"\r\n    field:\"model7_1\"\r\n    model7ToModel8 :{\r\n      id:\"model8_1\"\r\n      fieldDescription:\"model8_1_conn_to_model7_1\"\r\n      theModel8:{\r\n        id:\"model8_1\"\r\n        field:\"model8_1\"\r\n      }\r\n    }\r\n  },\r\n{\r\n    id:\"model7_2\"\r\n    field:\"model7_2\"\r\n    model7ToModel8 :{\r\n      id:\"model8_2\"\r\n      fieldDescription:\"model8_2_conn_to_model7_2\"\r\n      theModel8:{\r\n        id:\"model8_2\"\r\n        field:\"model8_2\"\r\n      }\r\n    }\r\n  },\r\n{\r\n    id:\"model7_3\"\r\n    field:\"model7_3\"\r\n    model7ToModel8 :{\r\n      id:\"model8_2\"\r\n      fieldDescription:\"model8_2_conn_to_model7_3\"\r\n      theModel8:{\r\n        id:\"model8_2\"\r\n        field:\"model8_2\"\r\n      }\r\n    }\r\n  }    \r\n  \r\n  ]){\r\n    id\r\n    model7ToModel8 {\r\n      id\r\n    }\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{endpoint}}/api/testdocumentdb/graph",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"api",
										"testdocumentdb",
										"graph"
									]
								}
							},
							"response": []
						},
						{
							"name": "SeedModel8",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has no errors\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors).to.eql(null);",
											"});",
											"",
											"pm.test(\"Contains correct JSON payload\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.batchCreateOrUpdateModel8.length).to.eql(2);",
											"    ",
											"    pm.expect(jsonData.data.batchCreateOrUpdateModel8[0].id).to.eql(\"model8_12\");",
											"    pm.expect(jsonData.data.batchCreateOrUpdateModel8[1].id).to.eql(\"model8_13\");",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/graphql"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "mutation {\r\n  batchCreateOrUpdateModel8(model8:[{\r\n    id:\"model8_12\"\r\n    field:\"model8_12\"\r\n  },{\r\n        id:\"model8_13\"\r\n    field:\"model8_13\"\r\n  }]){\r\n    id\r\n    field\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{endpoint}}/api/testdocumentdb/graph",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"api",
										"testdocumentdb",
										"graph"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "QueryAllModel6_WithNoQueryParams",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"function findItem(list, id) {",
									"        return list.filter(function(item){",
									"           return item.id === id; ",
									"        })[0];",
									"}",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(testName + \"Has no errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(null);",
									"});",
									"",
									"pm.test(testName + \"Contains correct JSON payload\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.searchAllModel6.length).to.eql(4);",
									"    ",
									"    var model1 = findItem(jsonData.data.searchAllModel6, \"model6_1\");",
									"    pm.expect(model1.id).to.eql(\"model6_1\");",
									"    pm.expect(model1.bestFriends).not.eql(null);",
									"    pm.expect(model1.bestFriends.length).to.eql(3);",
									"    ",
									"    pm.expect(model1.bestFriends[0].id).to.eql(\"model6_2\");",
									"    pm.expect(model1.bestFriends[1].id).to.eql(\"model6_3\");",
									"    pm.expect(model1.bestFriends[2].id).to.eql(\"model6_4\");",
									"    ",
									"    var model2 = findItem(jsonData.data.searchAllModel6, \"model6_2\");",
									"    pm.expect(model2.id).to.eql(\"model6_2\");",
									"    ",
									"    var model3 = findItem(jsonData.data.searchAllModel6, \"model6_3\");",
									"    pm.expect(model3.id).to.eql(\"model6_3\");",
									"    ",
									"    var model4 = findItem(jsonData.data.searchAllModel6, \"model6_4\");",
									"    pm.expect(model4.id).to.eql(\"model6_4\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "query{\r\n  searchAllModel6 {\r\n    id\r\n    field\r\n    intField\r\n    bestFriends {\r\n      id\r\n      field\r\n      theFriend{\r\n        id\r\n        intField\r\n      }\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testdocumentdb/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testdocumentdb",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "QueryAllModel6_WithOptionalParamWithField",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"function findItem(list, id) {",
									"        return list.filter(function(item){",
									"           return item.id === id; ",
									"        })[0];",
									"}",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(testName + \"Has no errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(null);",
									"});",
									"",
									"pm.test(testName + \"Contains correct JSON payload\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.searchAllModel6ByOptionalField.length).to.eql(1);",
									"    ",
									"    var model1 = findItem(jsonData.data.searchAllModel6ByOptionalField, \"model6_4\");",
									"    pm.expect(model1.id).to.eql(\"model6_4\");",
									"    pm.expect(model1.bestFriends).eql(null);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "query{\r\n  searchAllModel6ByOptionalField (field: { equal: \"model6_4\" }) {\r\n    id\r\n    field\r\n    intField\r\n    bestFriends {\r\n      id\r\n      field\r\n      theFriend{\r\n        id\r\n        intField\r\n      }\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testdocumentdb/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testdocumentdb",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "QueryAllModel6_WithoutOptionalParamWithField",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"function findItem(list, id) {",
									"        return list.filter(function(item){",
									"           return item.id === id; ",
									"        })[0];",
									"}",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(testName + \"Has no errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(null);",
									"});",
									"",
									"pm.test(testName + \"Contains correct JSON payload\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.searchAllModel6ByOptionalField.length).to.eql(4);",
									"    ",
									"    var model1 = findItem(jsonData.data.searchAllModel6ByOptionalField, \"model6_1\");",
									"    pm.expect(model1.id).to.eql(\"model6_1\");",
									"    pm.expect(model1.bestFriends).not.eql(null);",
									"    pm.expect(model1.bestFriends.length).to.eql(3);",
									"    ",
									"    pm.expect(model1.bestFriends[0].id).to.eql(\"model6_2\");",
									"    pm.expect(model1.bestFriends[1].id).to.eql(\"model6_3\");",
									"    pm.expect(model1.bestFriends[2].id).to.eql(\"model6_4\");",
									"    ",
									"    var model2 = findItem(jsonData.data.searchAllModel6ByOptionalField, \"model6_2\");",
									"    pm.expect(model2.id).to.eql(\"model6_2\");",
									"    ",
									"    var model3 = findItem(jsonData.data.searchAllModel6ByOptionalField, \"model6_3\");",
									"    pm.expect(model3.id).to.eql(\"model6_3\");",
									"    ",
									"    var model4 = findItem(jsonData.data.searchAllModel6ByOptionalField, \"model6_4\");",
									"    pm.expect(model4.id).to.eql(\"model6_4\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "query{\r\n  searchAllModel6ByOptionalField {\r\n    id\r\n    field\r\n    intField\r\n    bestFriends {\r\n      id\r\n      field\r\n      theFriend{\r\n        id\r\n        intField\r\n      }\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testdocumentdb/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testdocumentdb",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "SeedModelTestPermissionModel1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "mutation {\r\n  batchCreateOrUpdateTestPermissionModel1(testpermissionmodel1:[{\r\n    id: \"abc1\"\r\n    category :\"foo\"\r\n    value:\"1234567890\"\r\n  }]){\r\n    id\r\n    category\r\n    value\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testdocumentdbwithpermissions/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testdocumentdbwithpermissions",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "SeedModelTestPermissionModel1_WithLogin",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "mutation {\r\n  batchCreateOrUpdateTestPermissionModel1(testpermissionmodel1:[{\r\n    id: \"abc1\"\r\n    category :\"foo\"\r\n    value:\"1234567890\"\r\n  }]){\r\n    id\r\n    category\r\n    value\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testdocumentdbwithpermissions/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testdocumentdbwithpermissions",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "SeedModelTestPermissionModel2_WithLogin",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "mutation {\r\n  batchCreateOrUpdateTestPermissionModel2(testpermissionmodel2:[{\r\n    id: \"abc1\"\r\n    category :\"foo\"\r\n    value:\"1234567890\"\r\n  }]){\r\n    id\r\n    category\r\n    value\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testdocumentdbwithpermissions/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testdocumentdbwithpermissions",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "SeedModelTestPermissionModel3_WithLogin",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "mutation {\r\n  batchCreateOrUpdateTestPermissionModel3(testpermissionmodel3:[{\r\n    id: \"abc1\"\r\n    category :\"foo\"\r\n    value:\"1234567890\"\r\n  }]){\r\n    id\r\n    category\r\n    value\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testdocumentdbwithpermissions/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testdocumentdbwithpermissions",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "QuerySingleModel1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Found Model\", function () {",
									"    var jsonData = pm.response.json();",
									"    var model = jsonData.data.searchModel1;",
									"    ",
									"    pm.expect(model.id).to.eql(\"model1_5\");",
									"    pm.expect(model.type).to.eql(\"m1type2\");",
									"    ",
									"    pm.expect(model.field).to.eql(\"test 5\");",
									"    pm.expect(model.dateField).to.eql(\"2010-09-02T00:00:00Z\");",
									"    pm.expect(model.doubleField).to.eql(5906.07);",
									"    pm.expect(model.intField).to.eql(88);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "query{\r\n  searchModel1(id:{equal:\"model1_5\"}){\r\n    id\r\n    field\r\n    type\r\n    dateField\r\n    doubleField\r\n    intField\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testdocumentdb/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testdocumentdb",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "QuerySingleModel2WithEnum",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Found Model\", function () {",
									"    var jsonData = pm.response.json();",
									"    var model = jsonData.data.searchModel2;",
									"    ",
									"    pm.expect(model.id).to.eql(\"model2_5\");",
									"    pm.expect(model.type).to.eql(\"m2type2\");",
									"    ",
									"    pm.expect(model.field).to.eql(\"test 5\");",
									"    pm.expect(model.dateField).to.eql(\"2010-09-02T00:00:00Z\");",
									"    pm.expect(model.doubleField).to.eql(5906.07);",
									"    pm.expect(model.intField).to.eql(88);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "query{\r\n  searchModel2(id:{equal:\"model2_5\"}){\r\n    id\r\n    field\r\n    type\r\n    dateField\r\n    doubleField\r\n    intField\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testdocumentdb/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testdocumentdb",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "QuerySingleModel2WithoutEnum",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Found Model\", function () {",
									"    var jsonData = pm.response.json();",
									"    var model = jsonData.data.searchModel2;",
									"    ",
									"    pm.expect(model.id).to.eql(\"model2_4\");",
									"    pm.expect(model.type).to.eql(null);",
									"    pm.expect(model.field).to.eql(\"test 4\");",
									"    pm.expect(model.dateField).to.eql(\"2014-12-02T00:00:00Z\");",
									"    pm.expect(model.doubleField).to.eql(346.77);",
									"    pm.expect(model.intField).to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "query{\r\n  searchModel2(id:{equal:\"model2_4\"}){\r\n    id\r\n    field\r\n    type\r\n    dateField\r\n    doubleField\r\n    intField\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testdocumentdb/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testdocumentdb",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "QuerySingleModel6_1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"function findItem(list, id) {",
									"        return list.filter(function(item){",
									"           return item.id === id; ",
									"        })[0];",
									"}",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(testName + \"Has no errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(null);",
									"});",
									"",
									"pm.test(testName + \"Contains correct JSON payload\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.searchModel6.id).to.eql(\"model6_1\");",
									"    ",
									"     pm.expect(jsonData.data.searchModel6.intField).to.eql(22);",
									"     pm.expect(jsonData.data.searchModel6.field).to.eql(\"model6_1\");",
									"     pm.expect(jsonData.data.searchModel6.bestFriends.length).to.eql(3);",
									"    ",
									"    var bf2 = findItem(jsonData.data.searchModel6.bestFriends, \"model6_2\");",
									"    pm.expect(bf2.id).to.eql(\"model6_2\");",
									"    var bf3 = findItem(jsonData.data.searchModel6.bestFriends, \"model6_3\");",
									"    pm.expect(bf3.id).to.eql(\"model6_3\");",
									"    var bf4 = findItem(jsonData.data.searchModel6.bestFriends, \"model6_4\");",
									"    pm.expect(bf4.id).to.eql(\"model6_4\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "query{\r\n  searchModel6(id:{equal:\"model6_1\"}){\r\n    id\r\n    field\r\n    intField\r\n    bestFriends {\r\n      id\r\n      field\r\n      theFriend{\r\n        id\r\n        intField\r\n      }\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testdocumentdb/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testdocumentdb",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "QuerySingleModel6_2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has no errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(null);",
									"});",
									"",
									"pm.test(\"Contains correct JSON payload\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.searchModel6.id).to.eql(\"model6_2\");",
									"    ",
									"    pm.expect(jsonData.data.searchModel6.intField).to.eql(21);",
									"    pm.expect(jsonData.data.searchModel6.field).to.eql(\"model6_2\");",
									"    ",
									"    pm.expect(jsonData.data.searchModel6.bestFriends).to.eql(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "query{\r\n  searchModel6(id:{equal:\"model6_2\"}){\r\n    id\r\n    field\r\n    intField\r\n    bestFriends {\r\n      id\r\n      field\r\n      theFriend{\r\n        id\r\n        intField\r\n      }\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testdocumentdb/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testdocumentdb",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "QuerySingleModel6_3",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has no errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(null);",
									"});",
									"",
									"pm.test(\"Contains correct JSON payload\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.searchModel6.id).to.eql(\"model6_3\");",
									"    ",
									"    pm.expect(jsonData.data.searchModel6.intField).to.eql(20);",
									"    pm.expect(jsonData.data.searchModel6.field).to.eql(\"model6_3\");",
									"    ",
									"    pm.expect(jsonData.data.searchModel6.bestFriends).to.eql(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "query{\r\n  searchModel6(id:{equal:\"model6_3\"}){\r\n    id\r\n    field\r\n    intField\r\n    bestFriends {\r\n      id\r\n      field\r\n      theFriend{\r\n        id\r\n        intField\r\n      }\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testdocumentdb/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testdocumentdb",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "QueryModel7UsingModel8Id_Expect1Found",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(testName + \"Has no errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(null);",
									"});",
									"",
									"pm.test(testName + \"Contains correct JSON payload\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.getModel7WithModel8Id.length).to.eql(1);",
									"    ",
									"    var model = jsonData.data.getModel7WithModel8Id[0];",
									"    pm.expect(model.id).to.eql(\"model7_1\");",
									"    pm.expect(model.model7ToModel8.id).to.eql(\"model8_1\");",
									"    pm.expect(model.model7ToModel8.fieldDescription).to.eql(\"model8_1_conn_to_model7_1\");",
									"    pm.expect(model.model7ToModel8.theModel8.id).to.eql(\"model8_1\");",
									"    pm.expect(model.model7ToModel8.theModel8.field).to.eql(\"model8_1\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "query{\r\n  getModel7WithModel8Id(destinationid:{ equal:\"model8_1\" }){\r\n  \tid\r\n    field\r\n    model7ToModel8 {\r\n      id\r\n      fieldDescription\r\n      theModel8 {\r\n    \tid\r\n    \tfield\r\n      }\r\n    }\r\n  }\r\n}\r\n"
						},
						"url": {
							"raw": "{{endpoint}}/api/testdocumentdb/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testdocumentdb",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "QueryModel7UsingModel8Id_Expect2Found",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(testName + \"Has no errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(null);",
									"});",
									"",
									"pm.test(testName + \"Contains correct JSON payload\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.getModel7WithModel8Id.length).to.eql(2);",
									"    pm.expect(jsonData.data.getModel7WithModel8Id[0].id).to.eql(\"model7_2\");",
									"    pm.expect(jsonData.data.getModel7WithModel8Id[0].model7ToModel8.id).to.eql(\"model8_2\");",
									"    ",
									"    pm.expect(jsonData.data.getModel7WithModel8Id[1].id).to.eql(\"model7_3\");",
									"    pm.expect(jsonData.data.getModel7WithModel8Id[1].model7ToModel8.id).to.eql(\"model8_2\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "query{\r\n  getModel7WithModel8Id(destinationid:{ equal:\"model8_2\" }){\r\n  \tid\r\n    field\r\n    model7ToModel8 {\r\n      id\r\n    }\r\n  }\r\n}\r\n"
						},
						"url": {
							"raw": "{{endpoint}}/api/testdocumentdb/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testdocumentdb",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "QueryModel7UsingModel8Id_ExpectNoneFound",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(testName + \"Has no errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(null);",
									"});",
									"",
									"pm.test(testName + \"Contains correct JSON payload\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.getModel7WithModel8Id.length).to.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "query{\r\n  getModel7WithModel8Id(destinationid:{ equal:\"model8_55\" }){\r\n  \tid\r\n    field\r\n    model7ToModel8 {\r\n      id\r\n    }\r\n  }\r\n}\r\n"
						},
						"url": {
							"raw": "{{endpoint}}/api/testdocumentdb/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testdocumentdb",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetModel7WithModel8IdByIdAndField_Expect2Found",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(testName + \"Has no errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(null);",
									"});",
									"",
									"pm.test(testName + \"Contains correct JSON payload\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.getModel7WithModel8Field.length).to.eql(2);",
									"    ",
									"    var model7_2 = jsonData.data.getModel7WithModel8Field.filter(function(item){ return item.id === \"model7_2\";  })[0];",
									"    pm.expect(model7_2.id).to.eql(\"model7_2\");",
									"    pm.expect(model7_2.field).to.eql(\"model7_2\");",
									"    pm.expect(model7_2.model7ToModel8.id).to.eql(\"model8_2\");",
									"    pm.expect(model7_2.model7ToModel8.fieldDescription).to.eql(\"model8_2_conn_to_model7_2\");",
									"    pm.expect(model7_2.model7ToModel8.theModel8.id).to.eql(\"model8_2\");",
									"    pm.expect(model7_2.model7ToModel8.theModel8.field).to.eql(\"model8_2\");",
									"    ",
									"    var model7_3 = jsonData.data.getModel7WithModel8Field.filter(function(item){ return item.id === \"model7_3\";  })[0];",
									"    pm.expect(model7_3.id).to.eql(\"model7_3\");",
									"    pm.expect(model7_3.field).to.eql(\"model7_3\");",
									"    pm.expect(model7_3.model7ToModel8.id).to.eql(\"model8_2\");",
									"    pm.expect(model7_3.model7ToModel8.fieldDescription).to.eql(\"model8_2_conn_to_model7_3\");",
									"    pm.expect(model7_3.model7ToModel8.theModel8.id).to.eql(\"model8_2\");",
									"    pm.expect(model7_3.model7ToModel8.theModel8.field).to.eql(\"model8_2\");    ",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "query {\r\n  getModel7WithModel8Field(field: {equal:\"model8_2\"}){\r\n    id\r\n    field\r\n    model7ToModel8 {\r\n      id\r\n      fieldDescription\r\n      theModel8 {\r\n        id\r\n        field\r\n      }\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testdocumentdb/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testdocumentdb",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetModel7WithModel8IdByIdAndField_Expect1Found",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(testName + \"Has no errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(null);",
									"});",
									"",
									"pm.test(testName + \"Contains correct JSON payload\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.getModel7WithModel8Field.length).to.eql(1);",
									"    ",
									"    var model7_2 = jsonData.data.getModel7WithModel8Field.filter(function(item){ return item.id === \"model7_1\";  })[0];",
									"    pm.expect(model7_2.id).to.eql(\"model7_1\");",
									"    pm.expect(model7_2.field).to.eql(\"model7_1\");",
									"    pm.expect(model7_2.model7ToModel8.id).to.eql(\"model8_1\");",
									"    pm.expect(model7_2.model7ToModel8.fieldDescription).to.eql(\"model8_1_conn_to_model7_1\");",
									"    pm.expect(model7_2.model7ToModel8.theModel8.id).to.eql(\"model8_1\");",
									"    pm.expect(model7_2.model7ToModel8.theModel8.field).to.eql(\"model8_1\");",
									"    ",
									"",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "query {\r\n  getModel7WithModel8Field(field: {equal:\"model8_1\"}){\r\n    id\r\n    field\r\n    model7ToModel8 {\r\n      id\r\n      fieldDescription\r\n      theModel8 {\r\n        id\r\n        field\r\n      }\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testdocumentdb/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testdocumentdb",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetModel7WithModel8FieldAndConnectionFieldDescription_Expect1Found",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(testName + \"Has no errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(null);",
									"});",
									"",
									"pm.test(testName + \"Contains correct JSON payload\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.getModel7WithModel8FieldAndConnectionFieldDescription.length).to.eql(1);",
									"    ",
									"    var model7_3 = jsonData.data.getModel7WithModel8FieldAndConnectionFieldDescription.filter(function(item){ return item.id === \"model7_3\";  })[0];",
									"    pm.expect(model7_3.id).to.eql(\"model7_3\");",
									"    pm.expect(model7_3.field).to.eql(\"model7_3\");",
									"    pm.expect(model7_3.model7ToModel8.id).to.eql(\"model8_2\");",
									"    pm.expect(model7_3.model7ToModel8.fieldDescription).to.eql(\"model8_2_conn_to_model7_3\");",
									"    pm.expect(model7_3.model7ToModel8.theModel8.id).to.eql(\"model8_2\");",
									"    pm.expect(model7_3.model7ToModel8.theModel8.field).to.eql(\"model8_2\");",
									"    ",
									"",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "query {\r\n  getModel7WithModel8FieldAndConnectionFieldDescription(field: {equal:\"model8_2\"},\r\n  fielddescription : {equal:\"model8_2_conn_to_model7_3\"}){\r\n    id\r\n    field\r\n    model7ToModel8 {\r\n      id\r\n      fieldDescription\r\n      theModel8 {\r\n        id\r\n        field\r\n      }\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testdocumentdb/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testdocumentdb",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetModel7WithModel8FieldAndConnectionFieldDescription_Expect1Found_Part2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(testName + \"Has no errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(null);",
									"});",
									"",
									"pm.test(testName + \"Contains correct JSON payload\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.getModel7WithModel8FieldAndConnectionFieldDescription.length).to.eql(1);",
									"    ",
									"    var model7_2 = jsonData.data.getModel7WithModel8FieldAndConnectionFieldDescription.filter(function(item){ return item.id === \"model7_2\";  })[0];",
									"    pm.expect(model7_2.id).to.eql(\"model7_2\");",
									"    pm.expect(model7_2.field).to.eql(\"model7_2\");",
									"    pm.expect(model7_2.model7ToModel8.id).to.eql(\"model8_2\");",
									"    pm.expect(model7_2.model7ToModel8.fieldDescription).to.eql(\"model8_2_conn_to_model7_2\");",
									"    pm.expect(model7_2.model7ToModel8.theModel8.id).to.eql(\"model8_2\");",
									"    pm.expect(model7_2.model7ToModel8.theModel8.field).to.eql(\"model8_2\");",
									"    ",
									"",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "query {\r\n  getModel7WithModel8FieldAndConnectionFieldDescription(field: {equal:\"model8_2\"},\r\n  fielddescription : {equal:\"model8_2_conn_to_model7_2\"}){\r\n    id\r\n    field\r\n    model7ToModel8 {\r\n      id\r\n      fieldDescription\r\n      theModel8 {\r\n        id\r\n        field\r\n      }\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testdocumentdb/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testdocumentdb",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetModel7WithModel8FieldAndConnectionFieldDescription_Expect1Found_Part3",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(testName + \"Has no errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(null);",
									"});",
									"",
									"pm.test(testName + \"Contains correct JSON payload\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.getModel7WithModel8FieldAndConnectionFieldDescription.length).to.eql(2);",
									"    ",
									"    var model7_2 = jsonData.data.getModel7WithModel8FieldAndConnectionFieldDescription.filter(function(item){ return item.id === \"model7_2\";  })[0];",
									"    pm.expect(model7_2.id).to.eql(\"model7_2\");",
									"    pm.expect(model7_2.field).to.eql(\"model7_2\");",
									"    pm.expect(model7_2.model7ToModel8.id).to.eql(\"model8_2\");",
									"    pm.expect(model7_2.model7ToModel8.fieldDescription).to.eql(\"model8_2_conn_to_model7_2\");",
									"    pm.expect(model7_2.model7ToModel8.theModel8.id).to.eql(\"model8_2\");",
									"    pm.expect(model7_2.model7ToModel8.theModel8.field).to.eql(\"model8_2\");",
									"    ",
									"    var model7_3 = jsonData.data.getModel7WithModel8FieldAndConnectionFieldDescription.filter(function(item){ return item.id === \"model7_3\";  })[0];",
									"    pm.expect(model7_3.id).to.eql(\"model7_3\");",
									"    pm.expect(model7_3.field).to.eql(\"model7_3\");",
									"    pm.expect(model7_3.model7ToModel8.id).to.eql(\"model8_2\");",
									"    pm.expect(model7_3.model7ToModel8.fieldDescription).to.eql(\"model8_2_conn_to_model7_3\");",
									"    pm.expect(model7_3.model7ToModel8.theModel8.id).to.eql(\"model8_2\");",
									"    pm.expect(model7_3.model7ToModel8.theModel8.field).to.eql(\"model8_2\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "query {\r\n  getModel7WithModel8FieldAndConnectionFieldDescription(field: {equal:\"model8_2\"},\r\n  fielddescription : {startsWith:\"model8_2_conn_to_model7_\"}){\r\n    id\r\n    field\r\n    model7ToModel8 {\r\n      id\r\n      fieldDescription\r\n      theModel8 {\r\n        id\r\n        field\r\n      }\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testdocumentdb/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testdocumentdb",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetModel7FromConnectionEdgeExtensions",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(testName + \"Has no errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(null);",
									"});",
									"",
									"pm.test(testName + \"Contains correct JSON payload\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    var model7_2 = jsonData.data.getModel7FromConnectionEdge;",
									"    pm.expect(model7_2.id).to.eql(\"model7_2\");",
									"    pm.expect(model7_2.field).to.eql(\"model7_2\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "query {\r\n  getModel7FromConnectionEdge(id: {equal:\"model7_2\"}){\r\n    id\r\n    field\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testdocumentdb/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testdocumentdb",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "CleanupModel1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(testName + \"No errors.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eq(null);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "mutation {\r\n  deleteAllModel1{\r\n    message\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testdocumentdb/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testdocumentdb",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "CleanupModel2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(testName + \"No errors.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eq(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "mutation {\r\n  deleteAllModel2{\r\n    message\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testdocumentdb/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testdocumentdb",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "CleanupModel3",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(testName + \"No errors.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eq(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "mutation {\r\n  deleteAllModel3{\r\n    message\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testdocumentdb/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testdocumentdb",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "CleanupModel4",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(testName + \"No errors.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eq(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "mutation {\r\n  deleteAllModel4{\r\n    message\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testdocumentdb/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testdocumentdb",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "CleanupModel6",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(testName + \"No errors.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eq(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "mutation {\r\n  deleteAllModel6{\r\n    message\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testdocumentdb/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testdocumentdb",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "CleanupModel7",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(testName + \"No errors.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eq(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "mutation {\r\n  deleteAllModel7{\r\n    message\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testdocumentdb/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testdocumentdb",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "CleanupModel8",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(testName + \"No errors.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eq(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "mutation {\r\n  deleteAllModel8{\r\n    message\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testdocumentdb/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testdocumentdb",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "CleanupModelTestPermissionModel1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(testName + \"No errors.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eq(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "mutation {\r\n  deleteAllTestPermissionModel1{\r\n    message\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testdocumentdbwithpermissions/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testdocumentdbwithpermissions",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "CleanupModelTestPermissionModel2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "mutation {\r\n  deleteAllTestPermissionModel2{\r\n    message\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testdocumentdbwithpermissions/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testdocumentdbwithpermissions",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "CleanupModelTestPermissionModel3",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(testName + \"No errors.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eq(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "mutation {\r\n  deleteAllTestPermissionModel3{\r\n    message\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testdocumentdbwithpermissions/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testdocumentdbwithpermissions",
								"graph"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "TestInMemory",
			"item": [
				{
					"name": "GetSchema",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Contains query\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.__schema.queryType.name).to.eql(\"query\");",
									"});",
									"",
									"pm.test(\"Contains mutation\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.__schema.mutationType.name).to.eql(\"mutation\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":\"IntrospectionQuery\",\"variables\":{},\"query\":\"query IntrospectionQuery {\\n  __schema {\\n    queryType {\\n      name\\n    }\\n    mutationType {\\n      name\\n    }\\n    subscriptionType {\\n      name\\n    }\\n    types {\\n      ...FullType\\n    }\\n    directives {\\n      name\\n      description\\n      locations\\n      args {\\n        ...InputValue\\n      }\\n    }\\n  }\\n}\\n\\nfragment FullType on __Type {\\n  kind\\n  name\\n  description\\n  fields(includeDeprecated: true) {\\n    name\\n    description\\n    args {\\n      ...InputValue\\n    }\\n    type {\\n      ...TypeRef\\n    }\\n    isDeprecated\\n    deprecationReason\\n  }\\n  inputFields {\\n    ...InputValue\\n  }\\n  interfaces {\\n    ...TypeRef\\n  }\\n  enumValues(includeDeprecated: true) {\\n    name\\n    description\\n    isDeprecated\\n    deprecationReason\\n  }\\n  possibleTypes {\\n    ...TypeRef\\n  }\\n}\\n\\nfragment InputValue on __InputValue {\\n  name\\n  description\\n  type {\\n    ...TypeRef\\n  }\\n  defaultValue\\n}\\n\\nfragment TypeRef on __Type {\\n  kind\\n  name\\n  ofType {\\n    kind\\n    name\\n    ofType {\\n      kind\\n      name\\n      ofType {\\n        kind\\n        name\\n        ofType {\\n          kind\\n          name\\n          ofType {\\n            kind\\n            name\\n            ofType {\\n              kind\\n              name\\n              ofType {\\n                kind\\n                name\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testinmemory/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testinmemory",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "SeedModel1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Created data contains 12 items\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.batchCreateModel1.length).to.eql(12);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/graphql",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "mutation{\r\n  batchCreateModel1(model1:\r\n  [ { id:\"model1_1\", dateField: \"2018-01-02\", doubleField: 556.77, field:\"test 1\", intField: 44, type: m1type1 }\r\n\t{ id:\"model1_2\", dateField: \"2016-10-02\", doubleField: 66.71, field:\"test 2\", intField: 4, type: m1type1 }\r\n\t{ id:\"model1_3\", dateField: \"2011-12-02\", doubleField: 55.71, field:\"test 3\", intField: 3, type: m1type2 }\r\n\t{ id:\"model1_4\", dateField: \"2014-12-02\", doubleField: 346.77, field:\"test 4\", intField: 1, type: m1type1 }\r\n\t{ id:\"model1_5\", dateField: \"2010-09-02\", doubleField: 5906.07, field:\"test 5\", intField: 88, type: m1type2 }\r\n\t{ id:\"model1_6\", dateField: \"2000-01-22\", doubleField: 156.97, field:\"test 6\", intField: 76, type: m1type1 }\r\n\t{ id:\"model1_7\", dateField: \"1998-03-12\", doubleField: 89.71, field:\"test 7\", intField: 11, type: m1type1 }\r\n\t{ id:\"model1_8\", dateField: \"2019-02-02\", doubleField: 516.67, field:\"test 8\", intField: 43, type: m1type2 }\r\n\t{ id:\"model1_9\", dateField: \"2009-08-09\", doubleField: 516.99, field:\"test 9\", intField: 134, type: m1type1 }\r\n\t{ id:\"model1_10\", dateField: \"2008-11-12\", doubleField: 15.07, field:\"test 10\", intField: 99, type: m1type1 }\r\n\t{ id:\"model1_11\", dateField: \"2007-06-12\", doubleField: 325.97, field:\"test 11\", intField: 2, type: m1type2 }\r\n\t{ id:\"model1_12\", dateField: \"2005-05-02\", doubleField: 516.71, field:\"test 12\", intField: 4, type: m1type1 } ]){\r\n    id\r\n    intField\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testinmemory/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testinmemory",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "SeedModel2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Created data contains 12 items\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.batchCreateModel2.length).to.eql(12);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "mutation{\r\n  batchCreateModel2(model2:\r\n  [ { id:\"model2_1\", dateField: \"2018-01-02\", doubleField: 556.77, field:\"test 1\", intField: 44, type: m2type1 }\r\n\t{ id:\"model2_2\", dateField: \"2016-10-02\", doubleField: 66.71, field:\"test 2\", intField: 4, type: m2type1 }\r\n\t{ id:\"model2_3\", dateField: \"2011-12-02\", doubleField: 55.71, field:\"test 3\", intField: 3, type: m2type2 }\r\n\t{ id:\"model2_4\", dateField: \"2014-12-02\", doubleField: 346.77, field:\"test 4\", intField: 1 }\r\n\t{ id:\"model2_5\", dateField: \"2010-09-02\", doubleField: 5906.07, field:\"test 5\", intField: 88, type: m2type2 }\r\n\t{ id:\"model2_6\", dateField: \"2000-01-22\", doubleField: 156.97, field:\"test 6\", intField: 76, type: m2type1 }\r\n\t{ id:\"model2_7\", dateField: \"1998-03-12\", doubleField: 89.71, field:\"test 7\", intField: 11, type: m2type1 }\r\n\t{ id:\"model2_8\", dateField: \"2019-02-02\", doubleField: 516.67, field:\"test 8\", intField: 43, type: m2type2 }\r\n\t{ id:\"model2_9\", dateField: \"2009-08-09\", doubleField: 516.99, field:\"test 9\", intField: 134, type: m2type1 }\r\n\t{ id:\"model2_10\", dateField: \"2008-11-12\", doubleField: 15.07, field:\"test 10\", intField: 99 }\r\n\t{ id:\"model2_11\", dateField: \"2007-06-12\", doubleField: 325.97, field:\"test 11\", intField: 2 }\r\n\t{ id:\"model2_12\", dateField: \"2005-05-02\", doubleField: 516.71, field:\"test 12\", intField: 4 } ]){\r\n    id\r\n    intField\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testinmemory/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testinmemory",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "SeedModel3",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Created data contains 12 items\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.batchCreateModel3.length).to.eql(11);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "mutation{\r\n  batchCreateModel3(model3:\r\n  [ { id:\"model3_1\", dateField: \"2018-01-02\", doubleField: 556.77, field:\"test 1\", intField: 44 }\r\n\t{ id:\"model3_2\", dateField: \"2016-10-02\", doubleField: 66.71, field:\"test 2\", intField: 4 }\r\n\t{ id:\"model3_3\", dateField: \"2011-12-02\", doubleField: 55.71, field:\"test 3\", intField: 3 }\r\n\t{ id:\"model3_4\", dateField: \"2014-12-02\", doubleField: 346.77, field:\"test 4\", intField: 1 }\r\n\t{ id:\"model3_5\", dateField: \"2010-09-02\", doubleField: 5906.07, field:\"test 5\", intField: 88 }\r\n\t{ id:\"model3_6\", dateField: \"2000-01-22\", doubleField: 156.97, field:\"test 6\", intField: 76 }\r\n\t{ id:\"model3_7\", dateField: \"1998-03-12\", doubleField: 89.71, field:\"test 7\", intField: 11 }\r\n\t{ id:\"model3_8\", dateField: \"2019-02-02\", doubleField: 516.67, field:\"test 8\", intField: 43 }\r\n\t{ id:\"model3_9\", dateField: \"2009-08-09\", doubleField: 516.99, field:\"test 9\", intField: 134 }\r\n\t{ id:\"model3_10\", dateField: \"2008-11-12\", doubleField: 15.07, field:\"test 10\", intField: 99 }\r\n\t{ id:\"model3_12\", dateField: \"2005-05-02\", doubleField: 516.71, field:\"test 12\", intField: 4 } ]){\r\n    id\r\n    intField\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testinmemory/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testinmemory",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "QuerySingleModel1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Found Model\", function () {",
									"    var jsonData = pm.response.json();",
									"    var model = jsonData.data.searchModel1;",
									"    ",
									"    pm.expect(model.id).to.eql(\"model1_5\");",
									"    pm.expect(model.type).to.eql(\"m1type2\");",
									"    ",
									"    pm.expect(model.field).to.eql(\"test 5\");",
									"    pm.expect(model.dateField).to.eql(\"2010-09-02T00:00:00Z\");",
									"    pm.expect(model.doubleField).to.eql(5906.07);",
									"    pm.expect(model.intField).to.eql(88);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "query{\r\n  searchModel1(id:{equal:\"model1_5\"}){\r\n    id\r\n    field\r\n    type\r\n    dateField\r\n    doubleField\r\n    intField\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testinmemory/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testinmemory",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "QuerySingleModel2WithEnum",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Found Model\", function () {",
									"    var jsonData = pm.response.json();",
									"    var model = jsonData.data.searchModel2;",
									"    ",
									"    pm.expect(model.id).to.eql(\"model2_5\");",
									"    pm.expect(model.type).to.eql(\"m2type2\");",
									"    ",
									"    pm.expect(model.field).to.eql(\"test 5\");",
									"    pm.expect(model.dateField).to.eql(\"2010-09-02T00:00:00Z\");",
									"    pm.expect(model.doubleField).to.eql(5906.07);",
									"    pm.expect(model.intField).to.eql(88);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "query{\r\n  searchModel2(id:{equal:\"model2_5\"}){\r\n    id\r\n    field\r\n    type\r\n    dateField\r\n    doubleField\r\n    intField\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testinmemory/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testinmemory",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "QuerySingleModel2WithoutEnum",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Found Model\", function () {",
									"    var jsonData = pm.response.json();",
									"    var model = jsonData.data.searchModel2;",
									"    ",
									"    pm.expect(model.id).to.eql(\"model2_4\");",
									"    pm.expect(model.type).to.eql(null);",
									"    pm.expect(model.field).to.eql(\"test 4\");",
									"    pm.expect(model.dateField).to.eql(\"2014-12-02T00:00:00Z\");",
									"    pm.expect(model.doubleField).to.eql(346.77);",
									"    pm.expect(model.intField).to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "query{\r\n  searchModel2(id:{equal:\"model2_4\"}){\r\n    id\r\n    field\r\n    type\r\n    dateField\r\n    doubleField\r\n    intField\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testinmemory/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testinmemory",
								"graph"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "TestStorage",
			"item": [
				{
					"name": "Init",
					"item": [
						{
							"name": "GetSchema",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Contains query\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.__schema.queryType.name).to.eql(\"query\");",
											"});",
											"",
											"pm.test(\"Contains mutation\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.__schema.mutationType.name).to.eql(\"mutation\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"operationName\":\"IntrospectionQuery\",\"variables\":{},\"query\":\"query IntrospectionQuery {\\n  __schema {\\n    queryType {\\n      name\\n    }\\n    mutationType {\\n      name\\n    }\\n    subscriptionType {\\n      name\\n    }\\n    types {\\n      ...FullType\\n    }\\n    directives {\\n      name\\n      description\\n      locations\\n      args {\\n        ...InputValue\\n      }\\n    }\\n  }\\n}\\n\\nfragment FullType on __Type {\\n  kind\\n  name\\n  description\\n  fields(includeDeprecated: true) {\\n    name\\n    description\\n    args {\\n      ...InputValue\\n    }\\n    type {\\n      ...TypeRef\\n    }\\n    isDeprecated\\n    deprecationReason\\n  }\\n  inputFields {\\n    ...InputValue\\n  }\\n  interfaces {\\n    ...TypeRef\\n  }\\n  enumValues(includeDeprecated: true) {\\n    name\\n    description\\n    isDeprecated\\n    deprecationReason\\n  }\\n  possibleTypes {\\n    ...TypeRef\\n  }\\n}\\n\\nfragment InputValue on __InputValue {\\n  name\\n  description\\n  type {\\n    ...TypeRef\\n  }\\n  defaultValue\\n}\\n\\nfragment TypeRef on __Type {\\n  kind\\n  name\\n  ofType {\\n    kind\\n    name\\n    ofType {\\n      kind\\n      name\\n      ofType {\\n        kind\\n        name\\n        ofType {\\n          kind\\n          name\\n          ofType {\\n            kind\\n            name\\n            ofType {\\n              kind\\n              name\\n              ofType {\\n                kind\\n                name\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n\"}"
								},
								"url": {
									"raw": "{{endpoint}}/api/teststorage/graph",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"api",
										"teststorage",
										"graph"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Seed",
					"item": [
						{
							"name": "SeedModel7",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has no errors\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors).to.eql(null);",
											"});",
											"",
											"pm.test(\"Contains correct JSON payload\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.batchCreateOrUpdateModel7.length).to.eql(3);",
											"    ",
											"    var model1 = jsonData.data.batchCreateOrUpdateModel7[0];",
											"    pm.expect(model1.id).to.eql(\"model7_1\");",
											"    ",
											"    var model2 = jsonData.data.batchCreateOrUpdateModel7[1];",
											"    pm.expect(model2.id).to.eql(\"model7_2\");",
											"    ",
											"    var model3 = jsonData.data.batchCreateOrUpdateModel7[2];",
											"    pm.expect(model3.id).to.eql(\"model7_3\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/graphql"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "mutation {\r\n  batchCreateOrUpdateModel7(model7:[{\r\n    id:\"model7_1\"\r\n    field:\"model7_1\"\r\n    model7ToModel8 :{\r\n      id:\"model8_1\"\r\n      fieldDescription:\"model8_1_conn_to_model7_1\"\r\n      theModel8:{\r\n        id:\"model8_1\"\r\n        field:\"model8_1\"\r\n      }\r\n    }\r\n  },\r\n{\r\n    id:\"model7_2\"\r\n    field:\"model7_2\"\r\n    model7ToModel8 :{\r\n      id:\"model8_2\"\r\n      fieldDescription:\"model8_2_conn_to_model7_2\"\r\n      theModel8:{\r\n        id:\"model8_2\"\r\n        field:\"model8_2\"\r\n      }\r\n    }\r\n  },\r\n{\r\n    id:\"model7_3\"\r\n    field:\"model7_3\"\r\n    model7ToModel8 :{\r\n      id:\"model8_2\"\r\n      fieldDescription:\"model8_2_conn_to_model7_3\"\r\n      theModel8:{\r\n        id:\"model8_2\"\r\n        field:\"model8_2\"\r\n      }\r\n    }\r\n  }    \r\n  \r\n  ]){\r\n    id\r\n    model7ToModel8 {\r\n      id\r\n    }\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{endpoint}}/api/teststorage/graph",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"api",
										"teststorage",
										"graph"
									]
								}
							},
							"response": []
						},
						{
							"name": "SeedModel8",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Has no errors\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors).to.eql(null);",
											"});",
											"",
											"pm.test(\"Contains correct JSON payload\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data.batchCreateOrUpdateModel8.length).to.eql(2);",
											"    ",
											"    pm.expect(jsonData.data.batchCreateOrUpdateModel8[0].id).to.eql(\"model8_12\");",
											"    pm.expect(jsonData.data.batchCreateOrUpdateModel8[1].id).to.eql(\"model8_13\");",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/graphql"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "mutation {\r\n  batchCreateOrUpdateModel8(model8:[{\r\n    id:\"model8_12\"\r\n    field:\"model8_12\"\r\n  },{\r\n        id:\"model8_13\"\r\n    field:\"model8_13\"\r\n  }]){\r\n    id\r\n    field\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{endpoint}}/api/teststorage/graph",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"api",
										"teststorage",
										"graph"
									]
								}
							},
							"response": []
						},
						{
							"name": "SeedModel9And10",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var testName = pm.info.requestName + \": \";",
											"pm.test(testName + \"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(testName + \"Has no errors\", function () {",
											"",
											"    pm.expect(jsonData.errors).to.eql(null);",
											"});",
											"",
											"function findEntity(items, id){",
											"    var found = items.filter(x=> x.id === id);",
											"    if (found.length === 1) return found[0];",
											"    return null;",
											"}",
											"",
											"var jsonData = pm.response.json();",
											"var result = jsonData.data.batchCreateOrUpdateModel9;",
											"",
											"pm.test(testName + \"Contains correct JSON payload\", function () {",
											"    pm.expect(result.length).to.eql(2);",
											"    var model9_1 = findEntity(result, \"model9_1\");",
											"    pm.expect(model9_1).to.not.eql(undefined);",
											"    pm.expect(model9_1.id).to.eql(\"model9_1\");",
											"    pm.expect(model9_1.field).to.eql(\"model9 1\");",
											"    pm.expect(model9_1.eachModel10List).to.not.eql(null);",
											"    pm.expect(model9_1.eachModel10List.length).to.eql(3);",
											"    ",
											"    var model10_1 = findEntity(model9_1.eachModel10List, \"model10_1\");",
											"    pm.expect(model10_1).to.not.eql(undefined);",
											"    pm.expect(model10_1.id).to.eql(\"model10_1\");    ",
											"    pm.expect(model10_1.fieldDescription).to.eql(\"Rel model10_1 and model9_1\");  ",
											"    pm.expect(model10_1.model10.field).to.eql(\"model10 1\");",
											"    pm.expect(model10_1.model10.eachModel11List).to.not.eql(null);",
											"    pm.expect(model10_1.model10.eachModel11List.length).to.eql(2);",
											"    ",
											"    var model11_1 = findEntity(model10_1.model10.eachModel11List, \"model11_1\");",
											"    pm.expect(model11_1).to.not.eql(undefined);",
											"    pm.expect(model11_1.id).to.eql(\"model11_1\");    ",
											"    pm.expect(model11_1.fieldDescription).to.eql(\"Rel model10_1 and model11_1\");      ",
											"    pm.expect(model11_1.model11.id).to.eql(\"model11_1\");       ",
											"    pm.expect(model11_1.model11.field).to.eql(\"model11 1\");",
											"",
											"    var model11_2 = findEntity(model10_1.model10.eachModel11List, \"model11_2\");",
											"    pm.expect(model11_2).to.not.eql(undefined);",
											"    pm.expect(model11_2.id).to.eql(\"model11_2\");    ",
											"    pm.expect(model11_2.fieldDescription).to.eql(\"Rel model10_1 and model11_2\");      ",
											"    pm.expect(model11_2.model11.id).to.eql(\"model11_2\");       ",
											"    pm.expect(model11_2.model11.field).to.eql(\"model11 2\");",
											"    ",
											"    var model10_2 = findEntity(model9_1.eachModel10List, \"model10_2\");",
											"    pm.expect(model10_2).to.not.eql(undefined);",
											"    pm.expect(model10_2.id).to.eql(\"model10_2\"); ",
											"    pm.expect(model10_2.fieldDescription).to.eql(\"Rel model10_2 and model9_1\");  ",
											"    pm.expect(model10_2.model10.field).to.eql(\"model10 2\");",
											"    pm.expect(model10_2.model10.eachModel11List).to.not.eql(null);",
											"    pm.expect(model10_2.model10.eachModel11List.length).to.eql(1);  ",
											"    ",
											"    var model11_3 = findEntity(model10_2.model10.eachModel11List, \"model11_3\");",
											"    pm.expect(model11_3).to.not.eql(undefined);",
											"    pm.expect(model11_3.id).to.eql(\"model11_3\");    ",
											"    pm.expect(model11_3.fieldDescription).to.eql(\"Rel model10_2 and model11_3\");      ",
											"    pm.expect(model11_3.model11.id).to.eql(\"model11_3\");       ",
											"    pm.expect(model11_3.model11.field).to.eql(\"model11 3\");    ",
											"    ",
											"    var model10_3 = findEntity(model9_1.eachModel10List, \"model10_3\");",
											"    pm.expect(model10_3).to.not.eql(undefined);",
											"    pm.expect(model10_3.id).to.eql(\"model10_3\");",
											"    pm.expect(model10_3.fieldDescription).to.eql(\"Rel model10_3 and model9_1\");  ",
											"    pm.expect(model10_3.model10.field).to.eql(\"model10 3\");",
											"    pm.expect(model10_3.model10.eachModel11List).to.eql(null);",
											"    ",
											"    var model9_2 = findEntity(result, \"model9_2\");",
											"    pm.expect(model9_2).to.not.eql(undefined);",
											"    pm.expect(model9_2.id).to.eql(\"model9_2\");",
											"    pm.expect(model9_2.field).to.eql(\"model9 2\");",
											"    pm.expect(model9_2.eachModel10List).to.eql(null);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/graphql"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "# Write your query or mutation here\r\nmutation {\r\n  batchCreateOrUpdateModel9(model9:[{\r\n    id:\"model9_1\"\r\n    field:\"model9 1\"\r\n    eachModel10List:[{\r\n      id:\"model10_1\"\r\n      fieldDescription:\"Rel model10_1 and model9_1\"\r\n      model10:{\r\n        id:\"model10_1\"\r\n        field:\"model10 1\"\r\n        eachModel11List:[\r\n          {\r\n            id:\"model11_1\"\r\n            fieldDescription: \"Rel model10_1 and model11_1\"\r\n            model11:{\r\n              id:\"model11_1\"\r\n              field:\"model11 1\"\r\n            }\r\n          }, {\r\n           id:\"model11_2\"\r\n            fieldDescription: \"Rel model10_1 and model11_2\"\r\n            model11:{\r\n              id:\"model11_2\"\r\n              field:\"model11 2\"\r\n            }            \r\n          }\r\n        ]\r\n      }\r\n    },\r\n    {\r\n      id:\"model10_2\"\r\n      fieldDescription:\"Rel model10_2 and model9_1\"\r\n      model10:{\r\n        id:\"model10_2\"\r\n        field:\"model10 2\",\r\n        eachModel11List:[          {\r\n            id:\"model11_3\"\r\n            fieldDescription: \"Rel model10_2 and model11_3\"\r\n            model11:{\r\n              id:\"model11_3\"\r\n              field:\"model11 3\"\r\n            }\r\n          }]\r\n      }\r\n    },\r\n    {\r\n      id:\"model10_3\"\r\n      fieldDescription:\"Rel model10_3 and model9_1\"\r\n      model10:{\r\n        id:\"model10_3\"\r\n        field:\"model10 3\"\r\n      }\r\n    }]\r\n  },{\r\n    id:\"model9_2\"\r\n    field:\"model9 2\"\r\n  }]){\r\n    id\r\n    field\r\n    eachModel10List {\r\n      id\r\n      fieldDescription\r\n      model10 {\r\n        id\r\n        field\r\n        eachModel11List {\r\n          id\r\n          fieldDescription\r\n          model11 {\r\n            id\r\n            field\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{endpoint}}/api/teststorage/graph",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"api",
										"teststorage",
										"graph"
									]
								}
							},
							"response": []
						},
						{
							"name": "SeedModel12WithAutoIdAndValueFromHeader",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var testName = pm.info.requestName + \": \";",
											"pm.test(testName + \"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(testName + \"Has no errors\", function () {",
											"",
											"    pm.expect(jsonData.errors).to.eql(null);",
											"});",
											"",
											"pm.test(testName + \"Contains correct JSON payload\", function () {",
											"",
											"    var batch = jsonData.data.batchCreateOrUpdateModel12;",
											"    pm.expect(batch.length).to.eql(5);",
											"    ",
											"    for(var i = 0; i < batch.length; i++){",
											"        var item = batch[i];    ",
											"        pm.expect(item.id).to.not.eql(\"@\");",
											"        pm.expect(item.field.indexOf(\"model12 \") > -1).to.eql(true);",
											"        pm.expect(item.id.length > 1).to.eql(true);",
											"        pm.expect(item.fieldDateTime).to.eql(\"2019-01-01T00:00:00Z\");",
											"        ",
											"        pm.expect(item.fieldDateTimeToday.length).to.eql(20);",
											"        pm.expect(item.fieldDateTimeNow.length > 10).to.eql(true);",
											"        ",
											"        pm.expect(item.fieldFromHeader).to.eql(\"FOOBAR\");",
											"    }",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/graphql"
									},
									{
										"key": "SomeThingFromHeader",
										"value": "FOOBAR",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "mutation {\r\n  batchCreateOrUpdateModel12(model12:[{\r\n    id:\"@\"\r\n    field:\"model12 1\"\r\n    fieldDateTime: \"2019-01-01\"\r\n  },\r\n  {\r\n    id:\"@\"\r\n    field:\"model12 2\"\r\n    fieldDateTime: \"2019-01-01\"\r\n  },\r\n  {\r\n    id:\"@\"\r\n    field:\"model12 3\"\r\n    fieldDateTime: \"2019-01-01\"\r\n  },\r\n  {\r\n    id:\"@\"\r\n    field:\"model12 4\"\r\n    fieldDateTime: \"2019-01-01\"\r\n  },\r\n  {\r\n    id:\"@\"\r\n    field:\"model12 5\"\r\n    fieldDateTime: \"2019-01-01\"\r\n  }\r\n  \r\n  ]){\r\n    id\r\n    field\r\n    fieldFromHeader\r\n    fieldDateTime\r\n    fieldDateTimeToday\r\n    fieldDateTimeNow\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{endpoint}}/api/teststorage/graph",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"api",
										"teststorage",
										"graph"
									]
								}
							},
							"response": []
						},
						{
							"name": "SeedModel13",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var testName = pm.info.requestName + \": \";",
											"pm.test(testName + \"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(testName + \"Has no errors\", function () {",
											"",
											"    pm.expect(jsonData.errors).to.eql(null);",
											"});",
											"",
											"var batch1 = null;",
											"var batch2 = null;",
											"",
											"pm.test(testName + \"Contains correct JSON payload\", function () {",
											"",
											"    var batch = jsonData.data.batchCreateOrUpdateModel13Parent;",
											"    pm.expect(batch.length).to.eql(2);",
											"    ",
											"    batch1 = batch[0];",
											"    batch2 = batch[1];",
											"});",
											"",
											"pm.test(testName + \"Batch Item 1\", function () {",
											"    ",
											"    var item = batch1;",
											"    pm.expect(item.someKey).to.eql(\"model13_1\");",
											"    pm.expect(item.accountId).to.eql(\"1234\");",
											"    pm.expect(item.edges.length).to.eql(3);",
											"    ",
											"    pm.expect(item.edges[0].id).to.eql(\"model13child_1\");",
											"    pm.expect(item.edges[1].id).to.eql(\"model13child_2\");",
											"    pm.expect(item.edges[2].id).to.eql(\"model13child_3\");",
											"    ",
											"    pm.expect(item.edges[0].child.childId).to.eql(\"model13child_1\");",
											"    pm.expect(item.edges[1].child.childId).to.eql(\"model13child_2\");",
											"    pm.expect(item.edges[2].child.childId).to.eql(\"model13child_3\");",
											"    ",
											"    pm.expect(item.edges[0].child.accountId).to.eql(\"1234\");",
											"    pm.expect(item.edges[1].child.accountId).to.eql(\"1234\");",
											"    pm.expect(item.edges[2].child.accountId).to.eql(\"1234\");      ",
											"});",
											"",
											"pm.test(testName + \"Batch Item 2\", function () {",
											"    ",
											"    var item = batch2;",
											"    pm.expect(item.someKey).to.eql(\"model13_2\");",
											"    pm.expect(item.accountId).to.eql(\"1235\");",
											"    pm.expect(item.edges.length).to.eql(3);",
											"    ",
											"    pm.expect(item.edges[0].id).to.eql(\"model13child_1\");",
											"    pm.expect(item.edges[1].id).to.eql(\"model13child_4\");",
											"    pm.expect(item.edges[2].id).to.eql(\"model13child_3\");",
											"    ",
											"    pm.expect(item.edges[0].child.childId).to.eql(\"model13child_1\");",
											"    pm.expect(item.edges[1].child.childId).to.eql(\"model13child_4\");",
											"    pm.expect(item.edges[2].child.childId).to.eql(\"model13child_3\");",
											"    ",
											"    pm.expect(item.edges[0].child.accountId).to.eql(\"1235\");",
											"    pm.expect(item.edges[1].child.accountId).to.eql(\"1235\");",
											"    pm.expect(item.edges[2].child.accountId).to.eql(\"1235\");  ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/graphql"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "mutation {\r\n  batchCreateOrUpdateModel13Parent(model13parent:[{\r\n    someKey:\"model13_1\"\r\n    descr:\"model13 1\"\r\n    accountId: \"1234\"\r\n    edges: [{\r\n    \tid: \"model13child_1\"\r\n    \tfield: \"model13 1 to child 1\"\r\n    \tchild: {\r\n    \t\tchildId: \"model13child_1\"\r\n    \t\tfield: \"foo\"\r\n    \t\taccountId: \"1234\"\r\n    \t}\r\n    }, {\r\n    \tid: \"model13child_2\"\r\n    \tfield: \"model13 1 to child 2\"\r\n    \tchild: {\r\n    \t\tchildId: \"model13child_2\"\r\n    \t\tfield: \"foo\"\r\n    \t\taccountId: \"1234\"\r\n    \t}\r\n    }, {\r\n    \tid: \"model13child_3\"\r\n    \tfield: \"model13 1 to child 3\"\r\n    \tchild: {\r\n    \t\tchildId: \"model13child_3\"\r\n    \t\tfield: \"foo\"\r\n    \t\taccountId: \"1234\"\r\n    \t}\r\n    }]\r\n  },\r\n{\r\n    someKey:\"model13_2\"\r\n    descr:\"model13 2\"\r\n    accountId: \"1235\"\r\n    edges: [{\r\n    \tid: \"model13child_1\"\r\n    \tfield: \"model13 2 to child 1\"\r\n    \tchild: {\r\n    \t\tchildId: \"model13child_1\"\r\n    \t\tfield: \"foo\"\r\n    \t\taccountId: \"1235\"\r\n    \t}\r\n    }, {\r\n    \tid: \"model13child_4\"\r\n    \tfield: \"model13 2 to child 4\"\r\n    \tchild: {\r\n    \t\tchildId: \"model13child_4\"\r\n    \t\tfield: \"foo\"\r\n    \t\taccountId: \"1235\"\r\n    \t}\r\n    }, {\r\n    \tid: \"model13child_3\"\r\n    \tfield: \"model13 2 to child 3\"\r\n    \tchild: {\r\n    \t\tchildId: \"model13child_3\"\r\n    \t\tfield: \"foo\"\r\n    \t\taccountId: \"1235\"\r\n    \t}\r\n    }]\r\n  }\r\n\r\n  \r\n  ]){\r\n    someKey\r\n    descr\r\n    accountId\r\n    edges {\r\n    \tid\r\n    \tfield\r\n    \tchild {\r\n    \t\tchildId\r\n    \t\tfield\r\n    \t\taccountId\r\n    \t}\r\n    }\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{endpoint}}/api/teststorage/graph",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"api",
										"teststorage",
										"graph"
									]
								}
							},
							"response": []
						},
						{
							"name": "SeedModel14",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var testName = pm.info.requestName + \": \";",
											"pm.test(testName + \"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.test(testName + \"Has no errors\", function () {",
											"",
											"    pm.expect(jsonData.errors).to.eql(null);",
											"});",
											"",
											"pm.test(testName + \"Contains correct JSON payload\", function () {",
											"",
											"    var items = jsonData.data.batchCreateOrUpdateModel14;",
											"    pm.expect(items.length).to.eql(4);",
											"    ",
											"    pm.expect(items[0].someKey).to.eql(\"model14_1\");",
											"    pm.expect(items[1].someKey).to.eql(\"model14_2\");",
											"    pm.expect(items[2].someKey).to.eql(\"model14_3\");",
											"    pm.expect(items[3].someKey).to.eql(\"model14_4\");",
											"    ",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/graphql"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "mutation {\r\n  batchCreateOrUpdateModel14(model14:[{\r\n    someKey:\"model14_1\"\r\n    descr:\"model14 1\"\r\n  }, {\r\n    someKey:\"model14_2\"\r\n    descr:\"model14 2\"  \r\n  }, {\r\n    someKey:\"model14_3\"\r\n    descr:\"model14 3\"  \r\n  }, {\r\n    someKey:\"model14_4\"\r\n    descr:\"model14 4\"  \r\n  }]){\r\n    someKey\r\n    descr\r\n  }\r\n}"
								},
								"url": {
									"raw": "{{endpoint}}/api/teststorage/graph",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"api",
										"teststorage",
										"graph"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "QueryModel7WithValueFromHeader_Expect1Found",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(testName + \"Has no errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(null);",
									"});",
									"",
									"pm.test(testName + \"Contains correct JSON payload\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.getModel7WithIdFromHeader.length).to.eql(1);",
									"    ",
									"    var model = jsonData.data.getModel7WithIdFromHeader[0];",
									"    pm.expect(model.id).to.eql(\"model7_1\");",
									"    pm.expect(model.model7ToModel8.id).to.eql(\"model8_1\");",
									"    pm.expect(model.model7ToModel8.fieldDescription).to.eql(\"model8_1_conn_to_model7_1\");",
									"    pm.expect(model.model7ToModel8.theModel8.id).to.eql(\"model8_1\");",
									"    pm.expect(model.model7ToModel8.theModel8.field).to.eql(\"model8_1\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							},
							{
								"key": "Model7IdKey",
								"type": "text",
								"value": "model7_1"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "query{\r\n  getModel7WithIdFromHeader{\r\n  \tid\r\n    field\r\n    model7ToModel8 {\r\n      id\r\n      fieldDescription\r\n      theModel8 {\r\n    \tid\r\n    \tfield\r\n      }\r\n    }\r\n  }\r\n}\r\n"
						},
						"url": {
							"raw": "{{endpoint}}/api/teststorage/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"teststorage",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "QueryModel7UsingModel8Id_Expect1Found",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(testName + \"Has no errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(null);",
									"});",
									"",
									"pm.test(testName + \"Contains correct JSON payload\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.getModel7WithModel8Id.length).to.eql(1);",
									"    ",
									"    var model = jsonData.data.getModel7WithModel8Id[0];",
									"    pm.expect(model.id).to.eql(\"model7_1\");",
									"    pm.expect(model.model7ToModel8.id).to.eql(\"model8_1\");",
									"    pm.expect(model.model7ToModel8.fieldDescription).to.eql(\"model8_1_conn_to_model7_1\");",
									"    pm.expect(model.model7ToModel8.theModel8.id).to.eql(\"model8_1\");",
									"    pm.expect(model.model7ToModel8.theModel8.field).to.eql(\"model8_1\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "query{\r\n  getModel7WithModel8Id(destinationid:{ equal:\"model8_1\" }){\r\n  \tid\r\n    field\r\n    model7ToModel8 {\r\n      id\r\n      fieldDescription\r\n      theModel8 {\r\n    \tid\r\n    \tfield\r\n      }\r\n    }\r\n  }\r\n}\r\n"
						},
						"url": {
							"raw": "{{endpoint}}/api/teststorage/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"teststorage",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "QueryModel7UsingModel8Id_Expect2Found",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(testName + \"Has no errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(null);",
									"});",
									"",
									"pm.test(testName + \"Contains correct JSON payload\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.getModel7WithModel8Id.length).to.eql(2);",
									"    pm.expect(jsonData.data.getModel7WithModel8Id[0].id).to.eql(\"model7_2\");",
									"    pm.expect(jsonData.data.getModel7WithModel8Id[0].model7ToModel8.id).to.eql(\"model8_2\");",
									"    ",
									"    pm.expect(jsonData.data.getModel7WithModel8Id[1].id).to.eql(\"model7_3\");",
									"    pm.expect(jsonData.data.getModel7WithModel8Id[1].model7ToModel8.id).to.eql(\"model8_2\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "query{\r\n  getModel7WithModel8Id(destinationid:{ equal:\"model8_2\" }){\r\n  \tid\r\n    field\r\n    model7ToModel8 {\r\n      id\r\n    }\r\n  }\r\n}\r\n"
						},
						"url": {
							"raw": "{{endpoint}}/api/teststorage/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"teststorage",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "QueryModel7UsingModel8Id_ExpectNoneFound",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(testName + \"Has no errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(null);",
									"});",
									"",
									"pm.test(testName + \"Contains correct JSON payload\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.getModel7WithModel8Id.length).to.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "query{\r\n  getModel7WithModel8Id(destinationid:{ equal:\"model8_55\" }){\r\n  \tid\r\n    field\r\n    model7ToModel8 {\r\n      id\r\n    }\r\n  }\r\n}\r\n"
						},
						"url": {
							"raw": "{{endpoint}}/api/teststorage/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"teststorage",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetModel7WithModel8FieldAndConnectionFieldDescription_Expect1Found",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(testName + \"Has no errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(null);",
									"});",
									"",
									"pm.test(testName + \"Contains correct JSON payload\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.getModel7WithModel8FieldAndConnectionFieldDescription.length).to.eql(1);",
									"    ",
									"    var model7_3 = jsonData.data.getModel7WithModel8FieldAndConnectionFieldDescription.filter(function(item){ return item.id === \"model7_3\";  })[0];",
									"    pm.expect(model7_3.id).to.eql(\"model7_3\");",
									"    pm.expect(model7_3.field).to.eql(\"model7_3\");",
									"    pm.expect(model7_3.model7ToModel8.id).to.eql(\"model8_2\");",
									"    pm.expect(model7_3.model7ToModel8.fieldDescription).to.eql(\"model8_2_conn_to_model7_3\");",
									"    pm.expect(model7_3.model7ToModel8.theModel8.id).to.eql(\"model8_2\");",
									"    pm.expect(model7_3.model7ToModel8.theModel8.field).to.eql(\"model8_2\");",
									"    ",
									"",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "query {\r\n  getModel7WithModel8FieldAndConnectionFieldDescription(field: {equal:\"model8_2\"},\r\n  fielddescription : {equal:\"model8_2_conn_to_model7_3\"}){\r\n    id\r\n    field\r\n    model7ToModel8 {\r\n      id\r\n      fieldDescription\r\n      theModel8 {\r\n        id\r\n        field\r\n      }\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/teststorage/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"teststorage",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetModel7WithModel8FieldAndConnectionFieldDescription_Expect1Found_Part2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(testName + \"Has no errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(null);",
									"});",
									"",
									"pm.test(testName + \"Contains correct JSON payload\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.getModel7WithModel8FieldAndConnectionFieldDescription.length).to.eql(1);",
									"    ",
									"    var model7_2 = jsonData.data.getModel7WithModel8FieldAndConnectionFieldDescription.filter(function(item){ return item.id === \"model7_2\";  })[0];",
									"    pm.expect(model7_2.id).to.eql(\"model7_2\");",
									"    pm.expect(model7_2.field).to.eql(\"model7_2\");",
									"    pm.expect(model7_2.model7ToModel8.id).to.eql(\"model8_2\");",
									"    pm.expect(model7_2.model7ToModel8.fieldDescription).to.eql(\"model8_2_conn_to_model7_2\");",
									"    pm.expect(model7_2.model7ToModel8.theModel8.id).to.eql(\"model8_2\");",
									"    pm.expect(model7_2.model7ToModel8.theModel8.field).to.eql(\"model8_2\");",
									"    ",
									"",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "query {\r\n  getModel7WithModel8FieldAndConnectionFieldDescription(field: {equal:\"model8_2\"},\r\n  fielddescription : {equal:\"model8_2_conn_to_model7_2\"}){\r\n    id\r\n    field\r\n    model7ToModel8 {\r\n      id\r\n      fieldDescription\r\n      theModel8 {\r\n        id\r\n        field\r\n      }\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/teststorage/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"teststorage",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetModel7WithModel8FieldAndConnectionFieldDescription_Expect1Found_Part3",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(testName + \"Has no errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(null);",
									"});",
									"",
									"pm.test(testName + \"Contains correct JSON payload\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.getModel7WithModel8FieldAndConnectionFieldDescription.length).to.eql(2);",
									"    ",
									"    var model7_2 = jsonData.data.getModel7WithModel8FieldAndConnectionFieldDescription.filter(function(item){ return item.id === \"model7_2\";  })[0];",
									"    pm.expect(model7_2.id).to.eql(\"model7_2\");",
									"    pm.expect(model7_2.field).to.eql(\"model7_2\");",
									"    pm.expect(model7_2.model7ToModel8.id).to.eql(\"model8_2\");",
									"    pm.expect(model7_2.model7ToModel8.fieldDescription).to.eql(\"model8_2_conn_to_model7_2\");",
									"    pm.expect(model7_2.model7ToModel8.theModel8.id).to.eql(\"model8_2\");",
									"    pm.expect(model7_2.model7ToModel8.theModel8.field).to.eql(\"model8_2\");",
									"    ",
									"    var model7_3 = jsonData.data.getModel7WithModel8FieldAndConnectionFieldDescription.filter(function(item){ return item.id === \"model7_3\";  })[0];",
									"    pm.expect(model7_3.id).to.eql(\"model7_3\");",
									"    pm.expect(model7_3.field).to.eql(\"model7_3\");",
									"    pm.expect(model7_3.model7ToModel8.id).to.eql(\"model8_2\");",
									"    pm.expect(model7_3.model7ToModel8.fieldDescription).to.eql(\"model8_2_conn_to_model7_3\");",
									"    pm.expect(model7_3.model7ToModel8.theModel8.id).to.eql(\"model8_2\");",
									"    pm.expect(model7_3.model7ToModel8.theModel8.field).to.eql(\"model8_2\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "query {\r\n  getModel7WithModel8FieldAndConnectionFieldDescription(field: {equal:\"model8_2\"},\r\n  fielddescription : {startsWith:\"model8_2_conn_to_model7_\"}){\r\n    id\r\n    field\r\n    model7ToModel8 {\r\n      id\r\n      fieldDescription\r\n      theModel8 {\r\n        id\r\n        field\r\n      }\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/teststorage/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"teststorage",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetModel9WithPresetValues_Found1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(testName + \"Has no errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(null);",
									"});",
									"",
									"pm.test(testName + \"Contains correct JSON payload\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.getModel9.length).to.eql(1);",
									"    ",
									"    var model9_2 = jsonData.data.getModel9.filter(function(item){ return item.id === \"model9_2\";  })[0];",
									"    pm.expect(model9_2.id).to.eql(\"model9_2\");",
									"    pm.expect(model9_2.field).to.eql(\"model9 2\");",
									"   ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "query{\r\n  getModel9{\r\n    id\r\n    field\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/teststorage/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"teststorage",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetModel9WithNoneValidValues_Found0",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(testName + \"Has no errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(null);",
									"});",
									"",
									"pm.test(testName + \"Contains correct JSON payload\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.getModel9Foo.length).to.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "query{\r\n  getModel9Foo{\r\n    id\r\n    field\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/teststorage/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"teststorage",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetModel13Parent_AccountId1234",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(testName + \"Has no errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(null);",
									"});",
									"",
									"var batch1 = null;",
									"pm.test(testName + \"Contains correct JSON payload\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.getModel13Parent.length).to.eql(1);",
									"    ",
									"    batch1 = jsonData.data.getModel13Parent[0];",
									"});",
									"",
									"pm.test(testName + \"Batch Item 1\", function () {",
									"    ",
									"    var item = batch1;",
									"    pm.expect(item.someKey).to.eql(\"model13_1\");",
									"    pm.expect(item.accountId).to.eql(\"1234\");",
									"    pm.expect(item.edges.length).to.eql(3);",
									"    ",
									"    pm.expect(item.edges[0].id).to.eql(\"model13child_1\");",
									"    pm.expect(item.edges[1].id).to.eql(\"model13child_2\");",
									"    pm.expect(item.edges[2].id).to.eql(\"model13child_3\");",
									"    ",
									"    pm.expect(item.edges[0].child.childId).to.eql(\"model13child_1\");",
									"    pm.expect(item.edges[1].child.childId).to.eql(\"model13child_2\");",
									"    pm.expect(item.edges[2].child.childId).to.eql(\"model13child_3\");",
									"    ",
									"    pm.expect(item.edges[0].child.accountId).to.eql(\"1234\");",
									"    pm.expect(item.edges[1].child.accountId).to.eql(\"1234\");",
									"    pm.expect(item.edges[2].child.accountId).to.eql(\"1234\");      ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							},
							{
								"key": "AccountId",
								"value": "1234",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "query{\r\n  getModel13Parent{\r\n    someKey\r\n    descr\r\n    accountId\r\n    edges {\r\n    \tid\r\n    \tfield\r\n    \tchild {\r\n    \t\tchildId\r\n    \t\tfield\r\n    \t\taccountId\r\n    \t}\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/teststorage/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"teststorage",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetModel13Parent_AccountId1235",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(testName + \"Has no errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(null);",
									"});",
									"",
									"var batch2 = null;",
									"pm.test(testName + \"Contains correct JSON payload\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.getModel13Parent.length).to.eql(1);",
									"    ",
									"    batch2 = jsonData.data.getModel13Parent[0];",
									"});",
									"",
									"pm.test(testName + \"Batch Item 2\", function () {",
									"    ",
									"    var item = batch2;",
									"    pm.expect(item.someKey).to.eql(\"model13_2\");",
									"    pm.expect(item.accountId).to.eql(\"1235\");",
									"    pm.expect(item.edges.length).to.eql(3);",
									"    ",
									"    var edge = getChild(item.edges, \"model13child_1\");",
									"    pm.expect(edge.id).to.eql(\"model13child_1\");",
									"    pm.expect(edge.child.childId).to.eql(\"model13child_1\");",
									"    pm.expect(edge.child.accountId).to.eql(\"1235\");",
									"    ",
									"    edge = getChild(item.edges, \"model13child_3\");",
									"    pm.expect(edge.id).to.eql(\"model13child_3\");",
									"    pm.expect(edge.child.childId).to.eql(\"model13child_3\");",
									"    pm.expect(edge.child.accountId).to.eql(\"1235\");",
									"",
									"    edge = getChild(item.edges, \"model13child_4\");",
									"    pm.expect(edge.id).to.eql(\"model13child_4\");",
									"    pm.expect(edge.child.childId).to.eql(\"model13child_4\");",
									"    pm.expect(edge.child.accountId).to.eql(\"1235\");    ",
									"});",
									"",
									"function getChild(edges, id) { ",
									" return edges.filter(x=>x.id === id)[0];   ",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							},
							{
								"key": "AccountId",
								"type": "text",
								"value": "1235"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "query{\r\n  getModel13Parent{\r\n    someKey\r\n    descr\r\n    accountId\r\n    edges {\r\n    \tid\r\n    \tfield\r\n    \tchild {\r\n    \t\tchildId\r\n    \t\tfield\r\n    \t\taccountId\r\n    \t}\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/teststorage/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"teststorage",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetModel9ById",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(testName + \"Has no errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(null);",
									"});",
									"",
									"function findEntity(items, id){",
									"    var found = items.filter(x=> x.id === id);",
									"    if (found.length === 1) return found[0];",
									"    return null;",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"var result = jsonData.data.getModel9ById;",
									"",
									"pm.test(testName + \"Contains correct JSON payload\", function () {",
									"    pm.expect(result.length).to.eql(1);",
									"    var model9_1 = findEntity(result, \"model9_1\");",
									"    pm.expect(model9_1).to.not.eql(undefined);",
									"    pm.expect(model9_1.id).to.eql(\"model9_1\");",
									"    pm.expect(model9_1.field).to.eql(\"model9 1\");",
									"    pm.expect(model9_1.eachModel10List).to.not.eql(null);",
									"    pm.expect(model9_1.eachModel10List.length).to.eql(3);",
									"    ",
									"    var model10_1 = findEntity(model9_1.eachModel10List, \"model10_1\");",
									"    pm.expect(model10_1).to.not.eql(undefined);",
									"    pm.expect(model10_1.id).to.eql(\"model10_1\");    ",
									"    pm.expect(model10_1.fieldDescription).to.eql(\"Rel model10_1 and model9_1\");  ",
									"    pm.expect(model10_1.model10.field).to.eql(\"model10 1\");",
									"    pm.expect(model10_1.model10.eachModel11List).to.not.eql(null);",
									"    pm.expect(model10_1.model10.eachModel11List.length).to.eql(2);",
									"    ",
									"    var model11_1 = findEntity(model10_1.model10.eachModel11List, \"model11_1\");",
									"    pm.expect(model11_1).to.not.eql(undefined);",
									"    pm.expect(model11_1.id).to.eql(\"model11_1\");    ",
									"    pm.expect(model11_1.fieldDescription).to.eql(\"Rel model10_1 and model11_1\");      ",
									"    pm.expect(model11_1.model11.id).to.eql(\"model11_1\");       ",
									"    pm.expect(model11_1.model11.field).to.eql(\"model11 1\");",
									"",
									"    var model11_2 = findEntity(model10_1.model10.eachModel11List, \"model11_2\");",
									"    pm.expect(model11_2).to.not.eql(undefined);",
									"    pm.expect(model11_2.id).to.eql(\"model11_2\");    ",
									"    pm.expect(model11_2.fieldDescription).to.eql(\"Rel model10_1 and model11_2\");      ",
									"    pm.expect(model11_2.model11.id).to.eql(\"model11_2\");       ",
									"    pm.expect(model11_2.model11.field).to.eql(\"model11 2\");",
									"    ",
									"    var model10_2 = findEntity(model9_1.eachModel10List, \"model10_2\");",
									"    pm.expect(model10_2).to.not.eql(undefined);",
									"    pm.expect(model10_2.id).to.eql(\"model10_2\"); ",
									"    pm.expect(model10_2.fieldDescription).to.eql(\"Rel model10_2 and model9_1\");  ",
									"    pm.expect(model10_2.model10.field).to.eql(\"model10 2\");",
									"    pm.expect(model10_2.model10.eachModel11List).to.not.eql(null);",
									"    pm.expect(model10_2.model10.eachModel11List.length).to.eql(1);  ",
									"    ",
									"    var model11_3 = findEntity(model10_2.model10.eachModel11List, \"model11_3\");",
									"    pm.expect(model11_3).to.not.eql(undefined);",
									"    pm.expect(model11_3.id).to.eql(\"model11_3\");    ",
									"    pm.expect(model11_3.fieldDescription).to.eql(\"Rel model10_2 and model11_3\");      ",
									"    pm.expect(model11_3.model11.id).to.eql(\"model11_3\");       ",
									"    pm.expect(model11_3.model11.field).to.eql(\"model11 3\");    ",
									"    ",
									"    var model10_3 = findEntity(model9_1.eachModel10List, \"model10_3\");",
									"    pm.expect(model10_3).to.not.eql(undefined);",
									"    pm.expect(model10_3.id).to.eql(\"model10_3\");",
									"    pm.expect(model10_3.fieldDescription).to.eql(\"Rel model10_3 and model9_1\");  ",
									"    pm.expect(model10_3.model10.field).to.eql(\"model10 3\");",
									"    pm.expect(model10_3.model10.eachModel11List).to.eql(null);",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "query {\r\n  getModel9ById(id:{equal:\"model9_1\"}){\r\n        id\r\n    field\r\n    eachModel10List {\r\n      id\r\n      fieldDescription\r\n      model10 {\r\n        id\r\n        field\r\n        eachModel11List {\r\n          id\r\n          fieldDescription\r\n          model11 {\r\n            id\r\n            field\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/teststorage/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"teststorage",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetModel14ById",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(testName + \"Has no errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(null);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"var result = jsonData.data.getModel14ById;",
									"",
									"pm.test(testName + \"Contains correct JSON payload\", function () {",
									"    pm.expect(result.length).to.eql(1);",
									"    pm.expect(result[0].someKey).to.eql(\"model14_4\");",
									"    pm.expect(result[0].descr).to.eql(\"model14 4\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "query {\r\n  getModel14ById(somekey:{equal:\"model14_4\"}){\r\n    someKey\r\n    descr\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/teststorage/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"teststorage",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "CleanupModel7",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(testName + \"No errors.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eq(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "mutation {\r\n  deleteAllModel7{\r\n    message\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/teststorage/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"teststorage",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "CleanupModel8",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(testName + \"No errors.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eq(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "mutation {\r\n  deleteAllModel8{\r\n    message\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/teststorage/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"teststorage",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "CleanupModel9",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(testName + \"No errors.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eq(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "mutation {\r\n  deleteAllModel9{\r\n    message\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/teststorage/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"teststorage",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "CleanupModel10",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(testName + \"No errors.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eq(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "mutation {\r\n  deleteAllModel10{\r\n    message\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/teststorage/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"teststorage",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "CleanupModel14",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(testName + \"No errors.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eq(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "mutation {\r\n  deleteAllModel14{\r\n    message\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/teststorage/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"teststorage",
								"graph"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "SeedDatabase",
			"item": [
				{
					"name": "Seed Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Created data contains 30 items\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.batchCreateBook.length).to.eql(30);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"mutation {\\n  batchCreateBook(book: [{id: \\\"1\\\", name: \\\"Nancy in the Wonderland\\\", category: \\\"Children\\\"}, {id: \\\"2\\\", name: \\\"App in the Cloud\\\", category: \\\"Technology\\\"}, {id: \\\"3\\\", name: \\\"History of China\\\", category: \\\"History\\\"}, {id: \\\"4\\\", name: \\\"C/C++ for Beginners\\\", category: \\\"Technology\\\"}, {id: \\\"5\\\", name: \\\"How To Draw Anything\\\", category: \\\"Art\\\"}, {id: \\\"6\\\", name: \\\"Anatomy and Drawing\\\", category: \\\"Art\\\"}, {id: \\\"7\\\", name: \\\"Space Drawings\\\", category: \\\"Art\\\"}, {id: \\\"8\\\", name: \\\"Art for Beginners\\\", category: \\\"Art\\\"}, {id: \\\"9\\\", name: \\\"Chinese Art\\\", category: \\\"Art\\\"}, {id: \\\"10\\\", name: \\\"Art in 2018\\\", category: \\\"Art\\\"}, {id: \\\"11\\\", name: \\\"Makers of design\\\", category: \\\"Art\\\"}, {id: \\\"12\\\", name: \\\"Art Forms in Nature\\\", category: \\\"Art\\\"}, {id: \\\"13\\\", name: \\\"The Art of Instruction\\\", category: \\\"Art\\\"}, {id: \\\"14\\\", name: \\\"The Contemporary Art Book\\\", category: \\\"Art\\\"}, {id: \\\"15\\\", name: \\\"Sketchbook Fairy Tale\\\", category: \\\"Art\\\"}, {id: \\\"16\\\", name: \\\"Art History\\\", category: \\\"Art\\\"}, {id: \\\"17\\\", name: \\\"Roman Art\\\", category: \\\"Art\\\"}, {id: \\\"18\\\", name: \\\"The Metropolitan Museum of Art\\\", category: \\\"Art\\\"}, {id: \\\"19\\\", name: \\\"Texas Artworks\\\", category: \\\"Art\\\"}, {id: \\\"20\\\", name: \\\"Simple arts\\\", category: \\\"Art\\\"}, {id: \\\"21\\\", name: \\\"Art for kids\\\", category: \\\"Art\\\"}, {id: \\\"22\\\", name: \\\"Advanced art for kids\\\", category: \\\"Art\\\"}, {id: \\\"23\\\", name: \\\"Art and music\\\", category: \\\"Art\\\"}, {id: \\\"24\\\", name: \\\"Art Apps\\\", category: \\\"Art\\\"}, {id: \\\"25\\\", name: \\\"Art in homes\\\", category: \\\"Art\\\"}, {id: \\\"26\\\", name: \\\"Art ABC\\\", category: \\\"Art\\\"}, {id: \\\"27\\\", name: \\\"Touching Art\\\", category: \\\"Art\\\"}, {id: \\\"28\\\", name: \\\"Woodwork Art\\\", category: \\\"Art\\\"}, {id: \\\"29\\\", name: \\\"Plastics Art work\\\", category: \\\"Art\\\"}, {id: \\\"30\\\", name: \\\"Boring Art\\\", category: \\\"Art\\\"}]) {\\n    id\\n    name\\n    category\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "Seed Authors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Created data contains 12 items\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.batchCreateAuthor.length).to.eql(12);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"mutation {\\n  batchCreateAuthor(author: [{id: \\\"1\\\", name: \\\"James Wood\\\", homeCity: \\\"Dallas\\\"}, {id: \\\"2\\\", name: \\\"Andy Liu\\\", homeCity: \\\"Dallas\\\"}, {id: \\\"3\\\", name: \\\"Derick North\\\", homeCity: \\\"Dallas\\\"}, {id: \\\"4\\\", name: \\\"Mary Jane\\\", homeCity: \\\"Dallas\\\"}, {id: \\\"5\\\", name: \\\"Sir Richard Ice\\\", homeCity: \\\"Dallas\\\"}, {id: \\\"6\\\", name: \\\"Ken Poh\\\", homeCity: \\\"Plano\\\"}, {id: \\\"7\\\", name: \\\"Zac Mer\\\", homeCity: \\\"Plano\\\"}, {id: \\\"8\\\", name: \\\"Kathy Zhang\\\", homeCity: \\\"Plano\\\"}, {id: \\\"9\\\", name: \\\"Joe Cook\\\", homeCity: \\\"Richardson\\\"}, {id: \\\"10\\\", name: \\\"Michael Han\\\", homeCity: \\\"Richardson\\\"}, {id: \\\"11\\\", name: \\\"Fu Wen\\\", homeCity: \\\"Fort Worth\\\"}, {id: \\\"12\\\", name: \\\"Li Wei\\\", homeCity: \\\"Austin\\\"}]) {\\n    id\\n    name\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "Seed BookAuthors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Created data contains 7 items\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.batchCreateBookAuthors.length).to.eql(7);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"mutation {\\n  batchCreateBookAuthors(bookauthors: [{id: \\\"1\\\", bookId: \\\"1\\\", authorIdList: [\\\"1\\\"], royaltyType: \\\"b1\\\"}, {id: \\\"2\\\", bookId: \\\"2\\\", authorIdList: [\\\"2\\\", \\\"3\\\", \\\"4\\\"], royaltyType: \\\"b1\\\"}, {id: \\\"3\\\", bookId: \\\"3\\\", authorIdList: [\\\"3\\\", \\\"5\\\"], royaltyType: \\\"b1\\\"}, {id: \\\"4\\\", bookId: \\\"4\\\", authorIdList: [\\\"2\\\"], royaltyType: \\\"b1\\\"}, {id: \\\"5\\\", bookId: \\\"5\\\", authorIdList: [\\\"7\\\"], royaltyType: \\\"b1\\\"}, {id: \\\"6\\\", bookId: \\\"6\\\", authorIdList: [\\\"8\\\"], royaltyType: \\\"c1\\\"}, {id: \\\"7\\\", bookId: \\\"7\\\", authorIdList: [\\\"9\\\"], royaltyType: \\\"c1\\\"}]) {\\n    id\\n    bookId\\n    authorIdList\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "Seed Publishers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Created data contains 5 items\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.batchCreatePublisher.length).to.eql(11);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"mutation {\\n  batchCreatePublisher(publisher: [{id: \\\"1\\\", name: \\\"West House Publishing\\\"}, {id: \\\"2\\\", name: \\\"Northwest Inc\\\"}, {id: \\\"3\\\", name: \\\"Texas Publishers\\\"}, {id: \\\"4\\\", name: \\\"ACME\\\"}, {id: \\\"5\\\", name: \\\"Jane Publishing\\\"}, {id: \\\"6\\\", name: \\\"App Pub\\\"}, {id: \\\"8\\\", name: \\\"King Publishing House\\\"}, {id: \\\"9\\\", name: \\\"Queen Publishing House\\\"}, {id: \\\"10\\\", name: \\\"John Publishing House\\\"}, {id: \\\"11\\\", name: \\\"Mark Publishing House\\\"}, {id: \\\"12\\\", name: \\\"Bao Publisher\\\"}]) {\\n    id\\n    name\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "Seed Reviewers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Created data contains 10 items\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.batchCreateReviewer.length).to.eql(10);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"mutation {\\n  batchCreateReviewer(reviewer: [{id: \\\"1\\\", name: \\\"James A\\\", interests: [\\\"Technology\\\", \\\"Arts\\\"], region: \\\"Dallas/Fort Worth\\\"}, {id: \\\"2\\\", name: \\\"Mec James\\\", interests: [\\\"Technology\\\"], region: \\\"Austin\\\"}, {id: \\\"3\\\", name: \\\"Hal Bet\\\", interests: [\\\"Children\\\"], region: \\\"Houston\\\"}, {id: \\\"4\\\", name: \\\"Mary P\\\", interests: [\\\"Technology\\\"], region: \\\"Dallas/Fort Worth\\\"}, {id: \\\"5\\\", name: \\\"Rick James\\\", interests: [\\\"History\\\"], region: \\\"Seattle\\\"}, {id: \\\"6\\\", name: \\\"David Kim\\\", interests: [\\\"Technology\\\", \\\"Arts\\\"], region: \\\"St Paul/Minneapolis\\\"}, {id: \\\"7\\\", name: \\\"Phil Hack\\\", interests: [\\\"Arts\\\"], region: \\\"Baltimore\\\"}, {id: \\\"8\\\", name: \\\"Becky Far\\\", interests: [\\\"Politics\\\", \\\"Arts\\\"], region: \\\"San Fransico\\\"}, {id: \\\"9\\\", name: \\\"Kate Lim\\\", interests: [\\\"Technology\\\"], region: \\\"LA\\\"}, {id: \\\"10\\\", name: \\\"Mary Ann\\\", interests: [\\\"Children\\\"], region: \\\"Washington DC\\\"}]) {\\n    id\\n    name\\n    interests\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "Seed BookReviews",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Created data contains 7 items\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.batchCreateBookReview.length).to.eql(7);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"mutation {\\n  batchCreateBookReview(bookreview: [{id: \\\"1\\\", bookId: \\\"10\\\", comments: \\\"It's not a good book because the color is too dark.\\\", reviewerId: \\\"10\\\", stars: 1, active: true, writtenOn: \\\"2018-01-19\\\" }, {id: \\\"2\\\", bookId: \\\"11\\\", comments: \\\"It was awesome!\\\", reviewerId: \\\"8\\\", stars: 4, active: true, writtenOn: \\\"2018-11-03\\\"}, {id: \\\"3\\\", bookId: \\\"1\\\", comments: \\\"Sounds OK\\\", reviewerId: \\\"8\\\", stars: 3, active: false, writtenOn: \\\"2011-05-19\\\"}, {id: \\\"4\\\", bookId: \\\"3\\\", comments: \\\"I really enjoyed it!\\\", reviewerId: \\\"6\\\", stars: 4, active: true, writtenOn: \\\"2010-12-31\\\"}, {id: \\\"5\\\", bookId: \\\"4\\\", comments: \\\"Wow, amazing!\\\", reviewerId: \\\"5\\\", stars: 5, active: false, writtenOn: \\\"2018-02-09\\\"}, {id: \\\"6\\\", bookId: \\\"7\\\", comments: \\\"I love it!\\\", reviewerId: \\\"5\\\", stars: 5, active: true, writtenOn: \\\"2018-11-10\\\"}, {id: \\\"7\\\", bookId: \\\"9\\\", comments: \\\"Worst book ever. Don't even need to think about it.\\\", reviewerId: \\\"1\\\", stars: 1, active: true, writtenOn: \\\"2017-08-08\\\"}]) {\\n    id\\n    bookId\\n    reviewerId\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "Seed BookSearches",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Created data contains 30 items\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.batchCreateBookSearch.length).to.eql(30);",
									"});",
									"",
									"setTimeout(function(){}, 1000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"mutation {\\n  batchCreateBookSearch(booksearch: [{id: \\\"1\\\", name: \\\"Nancy in the Wonderland\\\", category: \\\"Children\\\"}, {id: \\\"2\\\", name: \\\"App in the Cloud\\\", category: \\\"Technology\\\"}, {id: \\\"3\\\", name: \\\"History of China\\\", category: \\\"History\\\"}, {id: \\\"4\\\", name: \\\"C/C++ for Beginners\\\", category: \\\"Technology\\\"}, {id: \\\"5\\\", name: \\\"How To Draw Anything\\\", category: \\\"Art\\\"}, {id: \\\"6\\\", name: \\\"Anatomy and Drawing\\\", category: \\\"Art\\\"}, {id: \\\"7\\\", name: \\\"Space Drawings\\\", category: \\\"Art\\\"}, {id: \\\"8\\\", name: \\\"Art for Beginners\\\", category: \\\"Art\\\"}, {id: \\\"9\\\", name: \\\"Chinese Art\\\", category: \\\"Art\\\"}, {id: \\\"10\\\", name: \\\"Art in 2018\\\", category: \\\"Art\\\"}, {id: \\\"11\\\", name: \\\"Makers of design\\\", category: \\\"Art\\\"}, {id: \\\"12\\\", name: \\\"Art Forms in Nature\\\", category: \\\"Art\\\"}, {id: \\\"13\\\", name: \\\"The Art of Instruction\\\", category: \\\"Art\\\"}, {id: \\\"14\\\", name: \\\"The Contemporary Art Book\\\", category: \\\"Art\\\"}, {id: \\\"15\\\", name: \\\"Sketchbook Fairy Tale\\\", category: \\\"Art\\\"}, {id: \\\"16\\\", name: \\\"Art History\\\", category: \\\"Art\\\"}, {id: \\\"17\\\", name: \\\"Roman Art\\\", category: \\\"Art\\\"}, {id: \\\"18\\\", name: \\\"The Metropolitan Museum of Art\\\", category: \\\"Art\\\"}, {id: \\\"19\\\", name: \\\"Texas Artworks\\\", category: \\\"Art\\\"}, {id: \\\"20\\\", name: \\\"Simple arts\\\", category: \\\"Art\\\"}, {id: \\\"21\\\", name: \\\"Art for kids\\\", category: \\\"Art\\\"}, {id: \\\"22\\\", name: \\\"Advanced art for kids\\\", category: \\\"Art\\\"}, {id: \\\"23\\\", name: \\\"Art and music\\\", category: \\\"Art\\\"}, {id: \\\"24\\\", name: \\\"Art Apps\\\", category: \\\"Art\\\"}, {id: \\\"25\\\", name: \\\"Art in homes\\\", category: \\\"Art\\\"}, {id: \\\"26\\\", name: \\\"Art ABC\\\", category: \\\"Art\\\"}, {id: \\\"27\\\", name: \\\"Touching Art\\\", category: \\\"Art\\\"}, {id: \\\"28\\\", name: \\\"Woodwork Art\\\", category: \\\"Art\\\"}, {id: \\\"29\\\", name: \\\"Plastics Art work\\\", category: \\\"Art\\\"}, {id: \\\"30\\\", name: \\\"Boring Art\\\", category: \\\"Art\\\"}]) {\\n    id\\n    name\\n    category\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Queries",
			"item": [
				{
					"name": "BookQueryById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"No errors are returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(null);",
									"});",
									"",
									"pm.test(\"Query returns with match\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.getBook.id).to.eql(\"1\");",
									"    pm.expect(jsonData.data.getBook.name).to.eql(\"Nancy in the Wonderland\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"{\\n  getBook(id: { equal: \\\"1\\\" } ) {\\n    id\\n    name\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "BooksQueryByCategory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Query returns with match\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.getBooksByCategory[0].id).to.eql(\"2\");",
									"    pm.expect(jsonData.data.getBooksByCategory[0].name).to.eql(\"App in the Cloud\");",
									"    pm.expect(jsonData.data.getBooksByCategory[0].category).to.eql(\"Technology\");",
									"    ",
									"    pm.expect(jsonData.data.getBooksByCategory[1].id).to.eql(\"4\");",
									"    pm.expect(jsonData.data.getBooksByCategory[1].name).to.eql(\"C/C++ for Beginners\");",
									"    pm.expect(jsonData.data.getBooksByCategory[1].category).to.eql(\"Technology\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"{\\n  getBooksByCategory(category: { equal: \\\"Technology\\\" } ) {\\n    id\\n    name\\n    category\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "BookAuthorsQueryByCategory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"No errors are returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    console.log(jsonData.errors);",
									"    pm.expect(jsonData.errors).to.eql(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"{\\n  getBookAuthorsByCategory(category: {equal: \\\"Technolog\\\"}) {\\n    items {\\n      id\\n      book {\\n        name\\n        category\\n      }\\n    }\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "BooksQueryById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Query returns with match\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.getBooksByCategory[0].id).to.eql(\"2\");",
									"    pm.expect(jsonData.data.getBooksByCategory[0].name).to.eql(\"App in the Cloud\");",
									"    pm.expect(jsonData.data.getBooksByCategory[0].category).to.eql(\"Technology\");",
									"    ",
									"    pm.expect(jsonData.data.getBooksByCategory[1].id).to.eql(\"4\");",
									"    pm.expect(jsonData.data.getBooksByCategory[1].name).to.eql(\"C/C++ for Beginners\");",
									"    pm.expect(jsonData.data.getBooksByCategory[1].category).to.eql(\"Technology\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"{\\n  getBooksByCategory(category: { equal: \\\"Technology\\\" }) {\\n    id\\n    name\\n    category\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPublisherById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"No errors are returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(null);",
									"});",
									"",
									"pm.test(\"Query returns with match\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.getPublisherById.id).to.eql(\"4\");",
									"    pm.expect(jsonData.data.getPublisherById.name).to.eql(\"ACME\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"{\\n  getPublisherById(id: { equal: \\\"4\\\" } ) {\\n    id\\n    name\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "getBookReviewByBookName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"No errors are returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(null);",
									"});",
									"",
									"pm.test(\"Query returns with match\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.getBookReviewByBookName.length).to.eql(1);",
									"    ",
									"    var entity = jsonData.data.getBookReviewByBookName[0];",
									"    ",
									"    pm.expect(entity.id).to.eql(\"3\");",
									"    pm.expect(entity.comments).to.eql(\"Sounds OK\");",
									"    pm.expect(entity.book.id).to.eql(\"1\");",
									"    pm.expect(entity.book.name).to.eql(\"Nancy in the Wonderland\");",
									"    pm.expect(entity.reviewer.id).to.eql(\"8\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"{\\n  getBookReviewByBookName(name: { equal: \\\"Nancy in the Wonderland\\\" }) {\\n    id\\n    comments\\n    stars\\n    book {\\n      id\\n      name\\n    }\\n    reviewer {\\n      id\\n      interests\\n      region\\n    }\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "getBookReviewsWithBookNameAndCategory_1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Query returns with match\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    pm.expect(jsonData.data.getBookReviewsWithBookNameAndCategory.length).to.eql(2);",
									"    ",
									"    var entity1 = jsonData.data.getBookReviewsWithBookNameAndCategory.filter(x=>x.id===\"7\")[0];",
									"",
									"    pm.expect(entity1.id).to.eql(\"7\");",
									"    pm.expect(entity1.stars).to.eql(1);",
									"    pm.expect(entity1.writtenOn).to.eql('2017-08-08T00:00:00Z');",
									"    pm.expect(entity1.active).to.eql(true);",
									"",
									"   var entity2 = jsonData.data.getBookReviewsWithBookNameAndCategory.filter(x=>x.id===\"1\")[0];",
									"    ",
									"    pm.expect(entity2.id).to.eql(\"1\");",
									"    pm.expect(entity2.stars).to.eql(1);",
									"    pm.expect(entity2.writtenOn).to.eql('2018-01-19T00:00:00Z');",
									"    pm.expect(entity2.active).to.eql(true);",
									"",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"{\\n  getBookReviewsWithBookNameAndCategory(name: {contains: \\\"Art\\\"}, category: {contains: \\\"Art\\\"}, stars: {greaterEqualThan: 1}, active: {equal: true}, writtenon: {greaterThan: \\\"2016-01-01\\\"}) {\\n    id\\n    comments\\n    stars\\n    writtenOn\\n    active\\n    book {\\n      id\\n      name\\n    }\\n    reviewer {\\n      id\\n      interests\\n      region\\n    }\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "getBookReviewsWithBookNameAndCategory_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Query returns with match\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.getBookReviewsWithBookNameAndCategory.length).to.eql(1);",
									"    ",
									"   var entity2 = jsonData.data.getBookReviewsWithBookNameAndCategory[0];",
									"    ",
									"    pm.expect(entity2.id).to.eql(\"1\");",
									"    pm.expect(entity2.stars).to.eql(1);",
									"    pm.expect(entity2.writtenOn).to.eql('2018-01-19T00:00:00Z');",
									"    pm.expect(entity2.active).to.eql(true);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"{\\n  getBookReviewsWithBookNameAndCategory(name: {contains: \\\"Art\\\"}, category: {contains: \\\"Art\\\"}, stars: {greaterEqualThan: 1}, active: {equal: true}, writtenon: {greaterThan: \\\"2018-01-01\\\"}) {\\n    id\\n    comments\\n    stars\\n    writtenOn\\n    active\\n    book {\\n      id\\n      name\\n    }\\n    reviewer {\\n      id\\n      interests\\n      region\\n    }\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "getBookReviewsWithBookNameAndCategory_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Query returns with match\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.getBookReviewsWithBookNameAndCategory.length).to.eql(1);",
									"    ",
									"    var entity1 = jsonData.data.getBookReviewsWithBookNameAndCategory[0];",
									"    ",
									"    pm.expect(entity1.id).to.eql(\"7\");",
									"    pm.expect(entity1.stars).to.eql(1);",
									"    pm.expect(entity1.writtenOn).to.eql('2017-08-08T00:00:00Z');",
									"    pm.expect(entity1.active).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"{\\n  getBookReviewsWithBookNameAndCategory(name: {contains: \\\"Art\\\"}, category: {contains: \\\"Art\\\"}, stars: {greaterEqualThan: 1}, active: {equal: true}, writtenon: {lessThan: \\\"2018-01-01\\\"}) {\\n    id\\n    comments\\n    stars\\n    writtenOn\\n    active\\n    book {\\n      id\\n      name\\n    }\\n    reviewer {\\n      id\\n      interests\\n      region\\n    }\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "searchBookReviews",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"function findById(list, id){",
									"  for(var i = 0; i < list.length; i++){",
									"      var item = list[i];",
									"      ",
									"      if (item.id === id) return item;",
									"  }  ",
									"  ",
									"  return null;",
									"}",
									"",
									"pm.test(\"Query returns with match\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.searchBookReviews.length).to.eql(4);",
									"    ",
									"    var entity1 = findById(jsonData.data.searchBookReviews,\"7\");",
									"    ",
									"    pm.expect(entity1.id).to.eql(\"7\");",
									"    ",
									"    var entity2 = findById(jsonData.data.searchBookReviews,\"1\");",
									"    ",
									"    pm.expect(entity2.id).to.eql(\"1\");",
									"    ",
									"    var entity3 = findById(jsonData.data.searchBookReviews,\"2\");",
									"    ",
									"    pm.expect(entity3.id).to.eql(\"2\");",
									"",
									"    var entity4 = findById(jsonData.data.searchBookReviews,\"6\");",
									"    ",
									"    pm.expect(entity4.id).to.eql(\"6\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"{\\n  searchBookReviews(searchtext: {equal: \\\"art\\\"}) {\\n    id\\n    writtenOn\\n    reviewerId\\n    comments\\n    stars\\n    bookId\\n    stars\\n    active\\n    reviewer {\\n      id\\n      name\\n      region\\n      interests\\n    }\\n    book {\\n      id\\n      name\\n      category\\n    }\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Mutations",
			"item": [
				{
					"name": "CreateBookWithId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var id = pm.environment.get(\"newId1\").toString(); ",
									"",
									"pm.test(\"Created data contains Id \" + id, function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    pm.expect(jsonData.data.createBook.id).to.eql(id);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var milliseconds = (new Date()).getTime().toString();",
									"pm.environment.set(\"newId1\", milliseconds);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"mutation {\\n  createBook(book: {id: \\\"{{newId1}}\\\", name: \\\"abc\\\", category: \\\"aaa\\\"}) {\\n    id\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "ResolveBookQueryWithId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var id = pm.environment.get(\"newId1\"); ",
									"    ",
									"pm.test(\"Query returns with match with Id \" + id, function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.getBook.id).to.eql(id);",
									"    pm.expect(jsonData.data.getBook.name).to.eql(\"abc\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"{\\n  getBook(id: { equal: \\\"{{newId1}}\\\" }) {\\n    id\\n    name\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateBookReview",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Book review is created.\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    pm.expect(jsonData.data.createBookReview.id).to.eql(\"101\");",
									"    pm.expect(jsonData.data.createBookReview.bookId).to.eql(\"1\");",
									"    pm.expect(jsonData.data.createBookReview.reviewerId).to.eql(\"1\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"mutation {\\n  createBookReview(bookreview: {id: \\\"101\\\", bookId: \\\"1\\\", reviewerId: \\\"1\\\", comments: \\\"It was good\\\", stars: 5, active: true, writtenOn: \\\"2018-12-01\\\"}) {\\n    id\\n    bookId\\n    reviewerId\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateBookReview",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var id = pm.environment.get(\"newId1\").toString(); ",
									"",
									"pm.test(\"Bookreview is updated.\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    pm.expect(jsonData.data.updateBookReview.id).to.eql(\"101\");",
									"    pm.expect(jsonData.data.updateBookReview.bookId).to.eql(\"1\");",
									"    pm.expect(jsonData.data.updateBookReview.reviewerId).to.eql(\"1\");",
									"    pm.expect(jsonData.data.updateBookReview.comments).to.eql(\"It was good ish I think\");",
									"    pm.expect(jsonData.data.updateBookReview.stars).to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"mutation {\\n  updateBookReview(bookreview: {id: \\\"101\\\", bookId: \\\"1\\\", reviewerId: \\\"1\\\", comments: \\\"It was good ish I think\\\", stars: 1, active: false, writtenOn: \\\"2017-12-01\\\"}) {\\n    id\\n    bookId\\n    reviewerId\\n    comments\\n    stars\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteBookReview",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Book review is deleted.\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    pm.expect(jsonData.data.deleteBookReview.message).not.equal(null);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"mutation {\\n  deleteBookReview(bookreview: {id: \\\"101\\\"}) {\\n    message\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ConnectionEdge",
			"item": [
				{
					"name": "SeedModel5",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(testName + \"Created data contains 1 items\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.createOrUpdateModel5.id).to.eql(\"model5_1\");",
									"    pm.expect(jsonData.data.createOrUpdateModel5.dateField).to.eql(\"2019-01-01T00:00:00Z\");",
									"    pm.expect(jsonData.data.createOrUpdateModel5.doubleField).to.eql(5.67);",
									"    pm.expect(jsonData.data.createOrUpdateModel5.bestFriend.id).to.eql(\"model5_2\");",
									"    pm.expect(jsonData.data.createOrUpdateModel5.closeFriend.id).to.eql(\"model5_4\");",
									"    pm.expect(jsonData.data.createOrUpdateModel5.closeFriend.theFriend.id).to.eql(\"model5_4\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/graphql",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "mutation {\r\n  createOrUpdateModel5(model5:{\r\n    id:\"model5_1\"\r\n  \tdateField:\"2019-01-01\"\r\n    doubleField: 5.67\r\n    field:\"do\"\r\n    intField: 6\r\n    closeFriend: {\r\n      id: \"model5_4\"\r\n      field: \"df\"\r\n      theFriend: {\r\n        id:\"model5_4\"\r\n        field:\"sdqq\"\r\n        dateField:\"2011-01-05\"\r\n        doubleField: 56.89\r\n        intField:87\r\n      }\r\n    }\r\n    bestFriend:{\r\n      id:\"model5_2\"\r\n      field:\"ray\"\r\n      theFriend:{\r\n        id:\"model5_2\"\r\n        dateField:\"2019-01-01\"\r\n        doubleField: 5.67\r\n        field:\"do\"\r\n        intField: 6\r\n      }\r\n    }\r\n  }){\r\n    id\r\n    dateField\r\n    doubleField\r\n    bestFriend{\r\n      id\r\n    }\r\n    closeFriend {\r\n      id\r\n      field\r\n      theFriend {\r\n    \tid\r\n      }\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testdocumentdb/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testdocumentdb",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "CanSeedModel5Again",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(testName + \"Created data contains 1 items\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.createOrUpdateModel5.id).to.eql(\"model5_1\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/graphql",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "mutation {\r\n  createOrUpdateModel5(model5:{\r\n    id:\"model5_1\"\r\n  \tdateField:\"2019-01-01\"\r\n    doubleField: 5.67\r\n    field:\"do\"\r\n    intField: 6\r\n    closeFriend: {\r\n      id: \"model5_4\"\r\n      field: \"df\"\r\n      theFriend: {\r\n        id:\"model5_4\"\r\n        field:\"sdqq\"\r\n        dateField:\"2011-01-05\"\r\n        doubleField: 56.89\r\n        intField:87\r\n      }\r\n    }\r\n    bestFriend:{\r\n      id:\"model5_2\"\r\n      field:\"ray\"\r\n      theFriend:{\r\n        id:\"model5_2\"\r\n        dateField:\"2019-01-01\"\r\n        doubleField: 5.67\r\n        field:\"do\"\r\n        intField: 6\r\n      }\r\n    }\r\n  }){\r\n    id\r\n    bestFriend{\r\n      id\r\n    }\r\n    closeFriend {\r\n      id\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testdocumentdb/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testdocumentdb",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "QueryModel5_1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Created data contains 1 items\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.searchModel5.id).to.eql(\"model5_1\");",
									"    pm.expect(jsonData.data.searchModel5.field).to.eql(\"do\");",
									"    pm.expect(jsonData.data.searchModel5.intField).to.eql(6);",
									"    pm.expect(jsonData.data.searchModel5.closeFriend.id).to.eql(\"model5_4\");",
									"    pm.expect(jsonData.data.searchModel5.closeFriend.theFriend.id).to.eql(\"model5_4\");",
									"    pm.expect(jsonData.data.searchModel5.bestFriend.id).to.eql(\"model5_2\");",
									"    pm.expect(jsonData.data.searchModel5.bestFriend.field).to.eql(\"ray\");",
									"    pm.expect(jsonData.data.searchModel5.bestFriend.theFriend.id).to.eql(\"model5_2\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "query{\r\n  searchModel5(id:{ equal: \"model5_1\" }){\r\n    id\r\n    field\r\n    intField\r\n    closeFriend {\r\n      id\r\n      theFriend {\r\n        id\r\n      }\r\n    }\r\n    bestFriend {\r\n      id\r\n      field \r\n      theFriend {\r\n        id\r\n        bestFriend {\r\n          id\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testdocumentdb/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testdocumentdb",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteModel5_1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Created data contains 1 items\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.deleteModel5.id).to.eql(\"model5_1\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "mutation {\r\n  deleteModel5(model5:{\r\n    id:\"model5_1\"\r\n  \tdateField:\"2019-01-01\"\r\n    doubleField: 5.67\r\n    field:\"do\"\r\n    intField: 6\r\n  }){\r\n    id\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testdocumentdb/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testdocumentdb",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "QueryModel5_1_AfterDelete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Created data contains 1 items\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.searchModel5).to.eql(null);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Cache-Control",
								"value": "No-Cache",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "query{\r\n  searchModel5(id:{ equal: \"model5_1\" }){\r\n    id\r\n    field\r\n    intField\r\n    closeFriend {\r\n      id\r\n      theFriend {\r\n        id\r\n      }\r\n    }\r\n    bestFriend {\r\n      id\r\n      field \r\n      theFriend {\r\n        id\r\n        bestFriend {\r\n          id\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testdocumentdb/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testdocumentdb",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateOrUpdateModel5_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Created data contains 1 items\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.createOrUpdateModel5.id).to.eql(\"model5_2\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "mutation {\r\n  createOrUpdateModel5(model5:{\r\n    id:\"model5_2\"\r\n  \tdateField:\"2019-01-01\"\r\n    doubleField: 15\r\n    field:\"do\"\r\n    intField: 7\r\n    bestFriend:{\r\n      id:\"model5_3\"\r\n      field:\"rzzzzzzzzz\"\r\n      theFriend:{\r\n        id:\"model5_3\"\r\n        dateField:\"2019-11-01\"\r\n        doubleField: 997\r\n        field:\"doNAHHS\"\r\n        intField: 61\r\n      }\r\n    }\r\n  }){\r\n    id\r\n    bestFriend{\r\n      id\r\n    }\r\n    closeFriend {\r\n      id\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testdocumentdb/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testdocumentdb",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "QueryModel5_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Created data contains 1 items\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.searchModel5.id).to.eql(\"model5_2\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "query{\r\n  searchModel5(id:{ equal: \"model5_2\" }){\r\n    id\r\n    field\r\n    intField\r\n    closeFriend {\r\n      id\r\n      theFriend {\r\n        id\r\n      }\r\n    }\r\n    bestFriend {\r\n      id\r\n      field \r\n      theFriend {\r\n        id\r\n        bestFriend {\r\n          id\r\n        }\r\n      }\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testdocumentdb/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testdocumentdb",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "CleanupModel5",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "mutation {\r\n  deleteAllModel5{\r\n    message\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testdocumentdb/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testdocumentdb",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "CleanupEdgeConnections",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "mutation {\r\n  deleteAllConnectionEdge{\r\n    message\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/testdocumentdb/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"testdocumentdb",
								"graph"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Paging",
			"item": [
				{
					"name": "GetFirstPageForBooksWithCategoryArt",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"function getPayLoad() {",
									"    var jsonData = pm.response.json();",
									"    var dto = jsonData.data.getPagedBooksByCategory;",
									"    return dto;",
									"}",
									"",
									"pm.test(\"Total count is returned and valid.\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.totalCount).to.eql(26);",
									"});",
									"",
									"pm.test(\"Edges return is defaulted to 10\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.edges.length).to.eql(10);",
									"});",
									"",
									"",
									"pm.test(\"Items return is defaulted to 10\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.items.length).to.eql(10);",
									"});",
									"",
									"pm.test(\"Previous page flag is false.\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.pageInfo.hasPreviousPage).to.eql(false);",
									"});",
									"",
									"pm.test(\"Next page flag is false.\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.pageInfo.hasNextPage).to.eql(true);",
									"});",
									"",
									"pm.test(\"Verify first item fetched has expected id.\", function () {",
									"    var dto = getPayLoad();",
									"    var first = dto.items[0];",
									"    pm.expect(first.id).to.eql(\"5\");",
									"});",
									"",
									"pm.test(\"Verify first edge fetched has expected id.\", function () {",
									"    var dto = getPayLoad();",
									"    var first = dto.edges[0].node;",
									"    pm.expect(first.id).to.eql(\"5\");",
									"});",
									"",
									"",
									"pm.test(\"Set next test from same sport.\", function () {",
									"    var dto = getPayLoad();",
									"    pm.environment.set(\"nextPageCursor\", dto.pageInfo.startCursor);",
									"    pm.environment.set(\"secondPageCursor\", dto.pageInfo.endCursor);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operationName\":null,\n\t\"variables\":{},\n\t\"query\":\"{\\n  getPagedBooksByCategory(category: { equal: \\\"Art\\\" }) {\\n    totalCount\\n    edges {\\n      cursor\\n      node {\\n        id\\n        name\\n        category\\n      }\\n    }\\n    items {\\n      id\\n      name\\n      category\\n    }\\n    pageInfo {\\n      startCursor\\n      endCursor\\n      hasNextPage\\n      hasPreviousPage\\n    }\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetFirstPageForBooksWithCategoryArtWithCursor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"function getPayLoad() {",
									"    var jsonData = pm.response.json();",
									"    var dto = jsonData.data.getPagedBooksByCategory;",
									"    return dto;",
									"}",
									"",
									"pm.test(\"Total count is returned and valid.\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.totalCount).to.eql(26);",
									"});",
									"",
									"pm.test(\"Edges return is defaulted to 10\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.edges.length).to.eql(10);",
									"});",
									"",
									"pm.test(\"Items return is defaulted to 10\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.items.length).to.eql(10);",
									"});",
									"",
									"pm.test(\"Previous page flag is false.\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.pageInfo.hasPreviousPage).to.eql(true);",
									"});",
									"",
									"pm.test(\"Next page flag is false.\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.pageInfo.hasNextPage).to.eql(true);",
									"});",
									"",
									"pm.test(\"Verify first item fetched has expected id.\", function () {",
									"    var dto = getPayLoad();",
									"    var first = dto.items[0];",
									"    pm.expect(first.id).to.eql(\"6\");",
									"});",
									"",
									"pm.test(\"Verify first edge fetched has expected id.\", function () {",
									"    var dto = getPayLoad();",
									"    var first = dto.edges[0].node;",
									"    pm.expect(first.id).to.eql(\"6\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operationName\":null,\n\t\"variables\":{},\n\t\"query\":\"{\\n  getPagedBooksByCategory(category: { equal: \\\"Art\\\" }, after: \\\"{{nextPageCursor}}\\\" ) {\\n    totalCount\\n    edges {\\n      cursor\\n      node {\\n        id\\n        name\\n        category\\n      }\\n    }\\n    items {\\n      id\\n      name\\n      category\\n    }\\n    pageInfo {\\n      startCursor\\n      endCursor\\n      hasNextPage\\n      hasPreviousPage\\n    }\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetSecondPageForBooksWithCategoryArtWithCursor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"function getPayLoad() {",
									"    var jsonData = pm.response.json();",
									"    var dto = jsonData.data.getPagedBooksByCategory;",
									"    return dto;",
									"}",
									"",
									"pm.test(\"Total count is returned and valid.\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.totalCount).to.eql(26);",
									"});",
									"",
									"pm.test(\"Edges return is defaulted to 10\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.edges.length).to.eql(10);",
									"});",
									"",
									"pm.test(\"Items return is defaulted to 10\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.items.length).to.eql(10);",
									"});",
									"",
									"pm.test(\"Previous page flag is true.\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.pageInfo.hasPreviousPage).to.eql(true);",
									"});",
									"",
									"pm.test(\"Next page flag is true.\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.pageInfo.hasNextPage).to.eql(true);",
									"});",
									"",
									"pm.test(\"Verify first item fetched has expected id.\", function () {",
									"    var dto = getPayLoad();",
									"    var first = dto.items[0];",
									"    pm.expect(first.id).to.eql(\"15\");",
									"});",
									"",
									"pm.test(\"Verify first edge fetched has expected id.\", function () {",
									"    var dto = getPayLoad();",
									"    var first = dto.edges[0].node;",
									"    pm.expect(first.id).to.eql(\"15\");",
									"});",
									"",
									"pm.test(\"Verify last item fetched has expected id.\", function () {",
									"    var dto = getPayLoad();",
									"    var last = dto.items[dto.items.length-1];",
									"    pm.expect(last.id).to.eql(\"24\");",
									"});",
									"",
									"pm.test(\"Verify last edge fetched has expected id.\", function () {",
									"    var dto = getPayLoad();",
									"    var last = dto.edges[dto.edges.length-1].node;",
									"    pm.expect(last.id).to.eql(\"24\");",
									"});",
									"",
									"",
									"pm.test(\"Set next test from same sport.\", function () {",
									"    var dto = getPayLoad();",
									"",
									"    pm.environment.set(\"thirdPageCursor\", dto.pageInfo.endCursor);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operationName\":null,\n\t\"variables\":{},\n\t\"query\":\"{\\n  getPagedBooksByCategory(category: { equal: \\\"Art\\\" }, after:\\\"{{secondPageCursor}}\\\") {\\n    totalCount\\n    edges {\\n      cursor\\n      node {\\n        id\\n        name\\n        category\\n      }\\n    }\\n    items {\\n      id\\n      name\\n      category\\n    }\\n    pageInfo {\\n      startCursor\\n      endCursor\\n      hasNextPage\\n      hasPreviousPage\\n    }\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetLastPageForBooksWithCategoryArtWithCursor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"function getPayLoad() {",
									"    var jsonData = pm.response.json();",
									"    var dto = jsonData.data.getPagedBooksByCategory;",
									"    return dto;",
									"}",
									"",
									"pm.test(\"Total count is returned and valid.\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.totalCount).to.eql(26);",
									"});",
									"",
									"pm.test(\"Edges return is defaulted to 6\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.edges.length).to.eql(6);",
									"});",
									"",
									"pm.test(\"Items return is defaulted to 6\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.items.length).to.eql(6);",
									"});",
									"",
									"pm.test(\"Previous page flag is true.\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.pageInfo.hasPreviousPage).to.eql(true);",
									"});",
									"",
									"pm.test(\"Next page flag is false.\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.pageInfo.hasNextPage).to.eql(false);",
									"});",
									"",
									"pm.test(\"Verify first item fetched has expected id.\", function () {",
									"    var dto = getPayLoad();",
									"    var first = dto.items[0];",
									"    pm.expect(first.id).to.eql(\"25\");",
									"});",
									"",
									"pm.test(\"Verify first edge fetched has expected id.\", function () {",
									"    var dto = getPayLoad();",
									"    var first = dto.edges[0].node;",
									"    pm.expect(first.id).to.eql(\"25\");",
									"});",
									"",
									"pm.test(\"Verify last item fetched has expected id.\", function () {",
									"    var dto = getPayLoad();",
									"    var last = dto.items[dto.items.length-1];",
									"    pm.expect(last.id).to.eql(\"30\");",
									"});",
									"",
									"pm.test(\"Verify last edge fetched has expected id.\", function () {",
									"    var dto = getPayLoad();",
									"    var last = dto.edges[dto.edges.length-1].node;",
									"    pm.expect(last.id).to.eql(\"30\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operationName\":null,\n\t\"variables\":{},\n\t\"query\":\"{\\n  getPagedBooksByCategory(category: { equal: \\\"Art\\\" }, after:\\\"{{thirdPageCursor}}\\\") {\\n    totalCount\\n    edges {\\n      cursor\\n      node {\\n        id\\n        name\\n        category\\n      }\\n    }\\n    items {\\n      id\\n      name\\n      category\\n    }\\n    pageInfo {\\n      startCursor\\n      endCursor\\n      hasNextPage\\n      hasPreviousPage\\n    }\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "CleanupReviewers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"mutation {\\n  deleteAllReviewer {\\n    message\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "CleanupPublishers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"mutation {\\n  deleteAllPublisher {\\n    message\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "CleanupBookAuthors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"mutation {\\n  deleteAllBookAuthors {\\n    message\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "CleanupBooks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"mutation {\\n  deleteAllBook {\\n    message\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "CleanupAuthors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"mutation {\\n  deleteAllAuthor {\\n    message\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "CleanupBookReviews",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"mutation {\\n  deleteAllBookReview {\\n    message\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "CleanupBookSearches",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"mutation {\\n  deleteAllBookSearch {\\n    message\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "CleanupReviewerSearches",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"mutation {\\n  deleteAllReviewerSearch {\\n    message\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteSearchIndexesForBooks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "mutation {\r\n  deleteAllModel3{\r\n    message\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/searchIndexes",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"searchIndexes"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}