pool:
  vmImage: 'windows-latest'

steps:

- task: DotNetCoreCLI@2
  displayName: 'Run unit tests'
  inputs:
    command: 'test'
    configuration: '$(BuildConfiguration)'
    projects: 'Eklee.Azure.Functions.GraphQl.Tests\Eklee.Azure.Functions.GraphQl.Tests.csproj'
    arguments: --verbosity normal --filter Category=Unit

- task: AzurePowerShell@4
  displayName: 'Reset Azure services for integration tests'
  inputs:
    azureSubscription: $(Global.ServiceConnectionName)
    scriptType: 'FilePath'
    scriptPath: 'Reset.ps1'
    azurePowerShellVersion: 'latestVersion'
    scriptArguments: -ResourceGroupName $(Global.ResourceGroupName) -Name $(Global.Name)

- task: AzurePowerShell@4
  displayName: 'Prepare configuration values for integration tests'
  inputs:
    azureSubscription: $(Global.ServiceConnectionName)
    scriptType: 'FilePath'
    scriptPath: 'ConfigureTestLocalSettings.ps1'
    azurePowerShellVersion: 'latestVersion'
    scriptArguments: -ResourceGroupName $(Global.ResourceGroupName) -Name $(Global.Name) -SourceRootDir $(Build.Repository.LocalPath)

# - task: DotNetCoreCLI@2
#   displayName: Run integration tests
#   timeoutInMinutes: 5
#   inputs:
#     command: 'test'
#     configuration: '$(BuildConfiguration)'
#     projects: 'Eklee.Azure.Functions.GraphQl.Tests\Eklee.Azure.Functions.GraphQl.Tests.csproj'
#     arguments: --blame --verbosity normal --filter Category=Integration

# - task: AzurePowerShell@4
#   displayName: 'Reset Azure services for functional tests'
#   inputs:
#     azureSubscription: $(Global.ServiceConnectionName)
#     scriptType: 'FilePath'
#     scriptPath: 'Reset.ps1'
#     azurePowerShellVersion: 'latestVersion'
#     scriptArguments: -ResourceGroupName $(Global.ResourceGroupName) -Name $(Global.Name)

- task: PowerShell@2
  name: config_version
  displayName: Configure release version
  inputs:
    targetType: filePath
    filePath: 'ConfigureVersion.ps1'
    arguments: -BuildConfiguration Release -IncrementVersionType minor

- task: DotNetCoreCLI@2
  displayName: Build Example Solution
  inputs:
    command: publish
    projects: 'Examples\Eklee.Azure.Functions.GraphQl.Example\Eklee.Azure.Functions.GraphQl.Example.csproj'
    publishWebProjects: false
    arguments: --configuration=$(config_version.buildConfig) -p:Version=$(config_version.version)

- task: AzureCLI@2
  name: test_example
  displayName: Run functional tests
  inputs:
    azureSubscription: $(Global.ServiceConnectionName)
    scriptType: ps
    scriptLocation: scriptPath
    scriptPath: 'TestExample.ps1'
    arguments: -Path $(Build.SourcesDirectory) -BuildConfig $(config_version.buildConfig) -ReportDir $(System.DefaultWorkingDirectory) -EnvironmentPath $(Build.Repository.LocalPath) -Name $(Global.Name) -Location $(Global.Location)

- task: PublishTestResults@2
  displayName: Publish test results
  condition: or(succeeded(), failed())
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: $(System.DefaultWorkingDirectory)\*.xml