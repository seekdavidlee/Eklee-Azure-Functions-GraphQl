pool:
  vmImage: 'windows-latest'

steps:

- task: DotNetCoreCLI@2
  displayName: 'Run unit tests'
  inputs:
    command: 'test'
    configuration: '$(BuildConfiguration)'
    projects: 'Eklee.Azure.Functions.GraphQl.Tests\Eklee.Azure.Functions.GraphQl.Tests.csproj'
    arguments: --verbosity normal --filter Category=Unit

- task: AzurePowerShell@4
  displayName: 'Reset Azure services for integration tests'
  inputs:
    azureSubscription: $(Global.ServiceConnectionName)
    scriptType: 'FilePath'
    scriptPath: 'Reset.ps1'
    azurePowerShellVersion: 'latestVersion'
    scriptArguments: -ResourceGroupName $(Global.ResourceGroupName) -Name $(Global.Name)

- task: AzurePowerShell@4
  displayName: 'Prepare configuration values for integration tests'
  name: prep
  inputs:
    azureSubscription: $(Global.ServiceConnectionName)
    scriptType: 'FilePath'
    scriptPath: 'ConfigureTestLocalSettings.ps1'
    azurePowerShellVersion: 'latestVersion'
    scriptArguments: -ResourceGroupName $(Global.ResourceGroupName) -Name $(Global.Name) -SourceRootDir $(Build.Repository.LocalPath)

- task: DotNetCoreCLI@2
  displayName: Run integration tests
  timeoutInMinutes: 5
  inputs:
    command: 'test'
    configuration: '$(BuildConfiguration)'
    projects: 'Eklee.Azure.Functions.GraphQl.Tests\Eklee.Azure.Functions.GraphQl.Tests.csproj'
    arguments: --blame --verbosity normal --filter Category=Integration

- task: AzurePowerShell@4
  displayName: 'Reset Azure services for functional tests'
  inputs:
    azureSubscription: $(Global.ServiceConnectionName)
    scriptType: 'FilePath'
    scriptPath: 'Reset.ps1'
    azurePowerShellVersion: 'latestVersion'
    scriptArguments: -ResourceGroupName $(Global.ResourceGroupName) -Name $(Global.Name)

- task: PowerShell@2
  name: config_version
  displayName: Configure release version
  inputs:
    targetType: filePath
    filePath: 'ConfigureVersion.ps1'
    arguments: -BuildId $(Build.BuildNumber)

- task: DotNetCoreCLI@2
  displayName: Build Example Solution
  inputs:
    command: publish
    projects: 'Examples\Eklee.Azure.Functions.GraphQl.Example\Eklee.Azure.Functions.GraphQl.Example.csproj'
    publishWebProjects: false
    arguments: --configuration=$(config_version.buildConfig) -p:Version=$(config_version.version)

- task: AzureResourceGroupDeployment@2
  displayName: Build Example Environment
  inputs:
    azureSubscription: $(Global.ServiceConnectionName)
    action: 'Create Or Update Resource Group'
    resourceGroupName: $(Global.TestResourceGroupName)
    location: $(Global.Location)
    templateLocation: 'Linked artifact'
    csmFile: '$(System.DefaultWorkingDirectory)/Templates/app.json'
    overrideParameters: -plan_name $(prep.StackName)

- task: AzureCLI@2
  name: test_example
  displayName: Run functional tests
  inputs:
    azureSubscription: $(Global.ServiceConnectionName)
    scriptType: ps
    scriptLocation: scriptPath
    scriptPath: 'TestExample.ps1'
    arguments: -Path $(Build.SourcesDirectory) -BuildConfig $(config_version.buildConfig) -ReportDir $(System.DefaultWorkingDirectory) -EnvironmentPath $(Build.Repository.LocalPath) -StackName $(prep.StackName) -Location $(Global.Location) -ResourceGroupName $(Global.TestResourceGroupName)

- task: PublishTestResults@2
  displayName: Publish test results
  condition: or(succeeded(), failed())
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: $(System.DefaultWorkingDirectory)\*.xml

- task: AzurePowerShell@4
  displayName: 'Cleanup after functional tests'
  condition: or(succeeded(), failed())
  inputs:
    azureSubscription: $(Global.ServiceConnectionName)
    scriptType: 'FilePath'
    scriptPath: 'Reset.ps1'
    azurePowerShellVersion: 'latestVersion'
    scriptArguments: -ResourceGroupName $(Global.ResourceGroupName) -Name $(Global.Name)

- task: AzureCLI@2
  displayName: 'Cleanup stack if functional tests passed'
  condition: succeeded()
  inputs:
    azureSubscription: $(Global.ServiceConnectionName)
    scriptType: ps
    scriptLocation: scriptPath
    scriptPath: 'CleanupExample.ps1'
    arguments: -Name $(Global.Name)

- task: DotNetCoreCLI@2
  condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Global.DebugNuget'], 'true')))
  displayName: Build
  inputs:
    command: build
    projects: 'Eklee.Azure.Functions.GraphQl\Eklee.Azure.Functions.GraphQl.csproj'
    arguments: --configuration=Release -p:Version=$(config_version.version)

- task: PowerShell@2
  condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Global.DebugNuget'], 'true')))
  name: prep_nuget_pack
  displayName: Prepare for nuget package
  inputs:
    targetType: filePath
    filePath: 'PrepNugetPack.ps1'
    arguments: -Path $(Build.SourcesDirectory)

- task: NuGetCommand@2
  condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Global.DebugNuget'], 'true')))
  displayName: Create nuget package
  inputs:
    command: pack
    packagesToPack: 'Eklee.Azure.Functions.GraphQl\Eklee.Azure.Functions.GraphQl.csproj'
    configuration: Release
    includeReferencedProjects: true
    packDestination: '$(Build.ArtifactStagingDirectory)'
    versioningScheme: byEnvVar
    versionEnvVar: config_version.version

- task: AzureFileCopy@4
  condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Global.DebugNuget'], 'true')))
  displayName: Upload nuget package
  inputs:
    sourcePath: $(Build.ArtifactStagingDirectory)/*.nupkg
    azureSubscription: $(Global.ServiceConnectionName)
    destination: azureBlob
    storage: $(Global.Name)
    containerName: packages